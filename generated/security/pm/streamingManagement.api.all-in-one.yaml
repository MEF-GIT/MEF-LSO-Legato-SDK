openapi: 3.0.1
info:
  contact:
    email: editor@mef.net
  description:
    "**This file forms part of MEF W143**\n\n**This API implements part\
    \ of the Business Requirements & Use Cases described \nin MEF W133 section 14.**\n\
    \n**This specification represents MEF work in progress and is subject to\nchange.**\n\
    \nList of use cases supported by Performance Monitoring Data Streaming Management\
    \ API: \n- List Available Topics for Subscription\n- List Subscribed Topics\n\
    - Subscribe to a Topic\n- Unsubscribe from a Topic\n\n\nMost important entities\
    \ supported by the API:\n- **Topic** - metadata describing a topic available for\
    \ subscription\n\n- **Subscription** - contains metadata information describing\
    \ a data stream that provides the details allowing for data consumption\n\nThis\
    \ API uses by reference AsyncAPI v2.6.0 models.\n\nCopyright 2023 MEF Forum and\
    \ its contributors\n"
  title: Performance Monitoring
  version: 1.0.0-RC
servers:
  - url: "https://{serverBase}/mefApi/legato/streamingManagement/v1"
    variables:
      serverBase:
        default: mef.net
        description: The base of SOF's URL.
security:
  - oauth2MEFLSOAPI:
      - default
tags:
  - description: Groups all operations related to the available topic.
    name: topic
  - description: |
      Groups all operations related to subscribed topics and  subscription management.
    name: subscription
  - name: events subscription
paths:
  /topic:
    get:
      description:
        List topics available for subscription to performance monitoring
        data
      operationId: topicList
      parameters:
        - description: Category of the available topic
          in: query
          name: category
          required: false
          schema:
            type: string
        - description: A communication protocol supported by the available topic
          in: query
          name: protocol
          required: false
          schema:
            type: string
        - description:
            Requested number of elements to be provided in response requested
            by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description:
            Requested index for the start of elements to be provided in response
            requested by the client. Note that the index starts with "0".
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"
          description: Success
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that the result page was throttled to a maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Result-Count:
              description: |
                Actual number of items returned in the response body E.g. if there are 50 matching items in total,  but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Total-Count:
              description: Total number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
          description: Method Not Allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - topicList
      summary: Retrieve Available Topics
      tags:
        - topic
  /topic/{id}:
    get:
      description: Information about the topic available for subscription
      operationId: topicById
      parameters:
        - description: Identifier of the topic
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Topic"
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
          description: Method Not Allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - topicById
      summary: Retrieve Available Topic by an Identifier
      tags:
        - topic
  /subscription:
    get:
      description: List all the subscriptions to all the topics
      operationId: subscriptionList
      parameters:
        - description: Identifier of a topic subscription belongs to
          in: query
          name: topicId
          required: false
          schema:
            type: string
        - description: A communication protocol supported by the available topic
          in: query
          name: protocol
          required: false
          schema:
            type: string
        - description:
            Requested number of elements to be provided in response requested
            by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description:
            Requested index for the start of elements to be provided in response
            requested by the client. Note that the index starts with "0".
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TopicSubscription"
          description: Success
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that the result page was throttled to the maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Result-Count:
              description: |
                An actual number of items returned in the response body E.g. if there are 50 matching items in total,  but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Total-Count:
              description: Total number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
          description: Method Not Allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - subscriptionList
      summary: Retrieve Topic Subscriptions List
      tags:
        - subscription
    post:
      description: Subscribe to the selected topic
      operationId: subscribeTopic
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/TopicSubscriptionRequest"
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/TopicSubscription"
          description: Registered
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
          description: Method Not Allowed
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error422"
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - subscribeTopic
      summary: Subscribe To a Topic
      tags:
        - subscription
  /subscription/{id}:
    delete:
      description: Remove a subscription for a  topic
      operationId: unsubscribeTopic
      parameters:
        - description: Identifier of the subscription
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Unsubscribe operation successful
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
          description: Method Not Allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - unsubscribeTopic
      summary: Unsubscribe From a Topic
      tags:
        - subscription
    get:
      description: Retrieve information about a subscription to a topic
      operationId: subscriptionById
      parameters:
        - description: Identifier of the subscription
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/TopicSubscription"
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
          description: Method Not Allowed
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - subscriptionById
      summary: Retrieve Topic Subscription By an Identifier
      tags:
        - subscription
components:
  parameters:
    Offset:
      description:
        Requested index for the start of elements to be provided in response
        requested by the client. Note that the index starts with "0".
      in: query
      name: offset
      required: false
      schema:
        type: integer
        format: int32
    Limit:
      description:
        Requested number of elements to be provided in response requested
        by client
      in: query
      name: limit
      required: false
      schema:
        type: integer
        format: int32
  responses:
    "400":
      content:
        application/json;charset=utf-8:
          schema:
            $ref: "#/components/schemas/Error400"
      description: Bad Request
    "401":
      content:
        application/json;charset=utf-8:
          schema:
            $ref: "#/components/schemas/Error401"
      description: Unauthorized
    "403":
      content:
        application/json;charset=utf-8:
          schema:
            $ref: "#/components/schemas/Error403"
      description: Forbidden
    "404":
      content:
        application/json;charset=utf-8:
          schema:
            $ref: "#/components/schemas/Error404"
      description: Not Found
    "405":
      content:
        application/json;charset=utf-8:
          schema:
            $ref: "#/components/schemas/Error"
      description: Method Not Allowed
    "422":
      content:
        application/json;charset=utf-8:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Error422"
      description: Unprocessable entity due to the business validation problems
    "500":
      content:
        application/json;charset=utf-8:
          schema:
            $ref: "#/components/schemas/Error500"
      description: Internal Server Error
  schemas:
    Error:
      type: object
      description:
        Standard Class used to describe API response error Not intended
        to be used directly. The `code` in the HTTP header is used as a discriminator
        for the type of error returned in runtime.
      properties:
        message:
          type: string
          description:
            Text that provides mode details and corrective actions related
            to the error. This can be shown to a client user.
        reason:
          type: string
          description:
            Text that explains the reason for the error. This can be shown
            to a client user.
          maxLength: 255
        referenceError:
          type: string
          format: uri
          description: URL pointing to documentation describing the error
      required:
        - reason
    Error400:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error400Code"
          required:
            - code
      description: Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)
    Error400Code:
      type: string
      description: |-
        One of the following error codes:
        - missingQueryParameter: The URI is missing a required query-string parameter
        - missingQueryValue: The URI is missing a required query-string parameter value
        - invalidQuery: The query section of the URI is invalid.
        - invalidBody: The request has an invalid body
      enum:
        - missingQueryParameter
        - missingQueryValue
        - invalidQuery
        - invalidBody
    Error401:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error401Code"
          required:
            - code
      description: Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)
    Error401Code:
      type: string
      description: |-
        One of the following error codes:
        - missingCredentials: No credentials provided.
        - invalidCredentials: Provided credentials are invalid or expired
      enum:
        - missingCredentials
        - invalidCredentials
    Error403:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error403Code"
          required:
            - code
      description:
        Forbidden. This code indicates that the server understood the request
        but refuses to authorize it. (https://tools.ietf.org/html/rfc7231#section-6.5.3)
    Error403Code:
      type: string
      description: |-
        This code indicates that the server understood the request but refuses to authorize it because of one of the following error codes:
        - accessDenied: Access denied
        - forbiddenRequester: Forbidden requester
        - tooManyUsers: Too many users
      enum:
        - accessDenied
        - forbiddenRequester
        - tooManyUsers
    Error404:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - notFound: A current representation for the target resource not found
              enum:
                - notFound
          required:
            - code
      description: Resource for the requested path not found. (https://tools.ietf.org/html/rfc7231#section-6.5.4)
    Error422:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error422Code"
            propertyPath:
              type: string
              description: |-
                A pointer to a particular property of the payload that caused the validation issue. It is highly recommended that this property should be used.
                Defined using JavaScript Object Notation (JSON) Pointer (https://tools.ietf.org/html/rfc6901).
          required:
            - code
      description: Unprocessable entity due to a business validation problem. (https://tools.ietf.org/html/rfc4918#section-11.2)
    Error422Code:
      type: string
      description: |-
        One of the following error codes:
        - missingProperty: The property that was expected is not present in the payload
        - invalidValue: The property has an incorrect value
        - invalidFormat: The property value does not comply with the expected value format
        - referenceNotFound: The object referenced by the property cannot be identified in the target system
        - unexpectedProperty: Additional, not expected property has been provided
        - tooLargeDataset: A requested entity will produce too much data
        - tooManyRecords: The number of records to be provided in the response exceeds the  threshold
        - tooManyRequests: The number of simultaneous requests from one API client exceeds the threshold
        - otherIssue: Other problem was identified (detailed information provided in a reason)
      enum:
        - missingProperty
        - invalidValue
        - invalidFormat
        - referenceNotFound
        - unexpectedProperty
        - tooLargeDataset
        - tooManyRecords
        - tooManyRequests
        - otherIssue
    Error500:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - internalError: Internal server error - the server encountered an unexpected condition that prevented it from fulfilling the request.
              enum:
                - internalError
          required:
            - code
      description: Internal Server Error. (https://tools.ietf.org/html/rfc7231#section-6.6.1)
    Subscription:
      type: object
      description: Provides stream metadata information that allows for data consumption.
      properties:
        id:
          type: string
          description: A unique identifier for the stream.
        description:
          type: string
          description: An explanatory description of the stream.
        priority:
          type: string
          description:
            "The priority level of the stream. Can be high, medium, or\
            \ low."
        connectionConfig:
          $ref: "#/components/schemas/ConnectionConfig"
      required:
        - id
    Topic:
      type: object
      additionalProperties: true
      description: |
        Provides metadata describing a topic available for subscription. This object is used to define available consumption mechanisms and the data model.
      properties:
        id:
          type: string
          description: |
            An identifier for the topic. This can be used to uniquely identify the topic within the Server system.
        category:
          $ref: "#/components/schemas/Category"
        modelRef:
          type: string
          format: uri
          description: |
            A reference to a model that describes the structure of the data associated with the topic.
        availableChannels:
          type: array
          description: |
            An array of channel descriptions that provide information about the channels through which the topic can be accessed.
          items:
            $ref: "#/components/schemas/ChannelDescription"
          minItems: 1
      required:
        - id
    TopicSubscription:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - $ref: "#/components/schemas/TopicSubscriptionRequest"
      description: Information about the subscription to a specific topic
    TopicSubscriptionRequest:
      type: object
      additionalProperties: true
      properties:
        protocol:
          type: string
          description: |
            Name of the protocol consumer is intended to use to consume data from `topicId`.  The name of protocol must be one of the defined for the topic.
        topicId:
          type: string
          description: Identifier of the topic consumer wants to subscribe to
      required:
        - protocol
        - topicId
    ConnectionConfig:
      type: object
      description: Configuration settings for establishing a connection to the stream.
      properties:
        servers:
          $ref: "#/components/schemas/servers"
        channel:
          $ref: "#/components/schemas/Channel"
    servers:
      type: object
      additionalProperties:
        oneOf:
          - $ref: "#/components/schemas/Reference"
          - $ref: "#/components/schemas/server"
      description: The Servers Object is a map of Server Objects.
    Channel:
      type: object
      properties:
        name:
          type: string
          format: uri-template
          description: The name of the channel through which the stream data is transmitted.
          minLength: 1
        bindings:
          $ref: "#/components/schemas/bindingsObject"
    bindingsObject:
      type: object
      additionalProperties: true
      description: Map describing protocol-specific definitions for a server.
      properties:
        http:
          type: object
        ws:
          type: object
        amqp:
          type: object
        amqp1:
          type: object
        mqtt:
          type: object
        mqtt5:
          type: object
        kafka:
          type: object
        anypointmq:
          type: object
        nats:
          type: object
        jms:
          type: object
        sns:
          type: object
        sqs:
          type: object
        stomp:
          type: object
        redis:
          type: object
        ibmmq:
          type: object
        solace:
          type: object
        googlepubsub:
          type: object
        pulsar:
          type: object
    SubscriptionRequest:
      type: object
      additionalProperties: true
      properties:
        protocol:
          type: string
          description: |
            Name of the protocol consumer is intended to use to consume data from `topicId`.  The name of protocol must be one of the defined for the topic.
        topicId:
          type: string
          description: Identifier of the topic consumer wants to subscribe to
      required:
        - protocol
        - topicId
    ChannelDescription:
      type: object
      properties:
        protocol:
          type: string
          description: Name of technical protocol allowing for consumption
        description:
          type: string
          description: Human friendly description of the protocol
      required:
        - protocol
    Reference:
      type: object
      properties:
        $ref:
          $ref: "#/components/schemas/ReferenceObject"
      required:
        - $ref
    ReferenceObject:
      type: string
      format: uri-reference
      description:
        "A simple object to allow referencing other components in the specification,\
        \ internally and externally."
      example: "{$ref=http://asyncapi.com/examples/2.6.0/ReferenceObject.json}"
    server:
      type: object
      additionalProperties: false
      description:
        "An object representing a message broker, a server or any other\
        \ kind of computer program capable of sending and/or receiving data"
      properties:
        url:
          type: string
          description:
            "A URL to the target host. This URL supports Server Variables\
            \ and MAY be relative, to indicate that the host location is relative\
            \ to the location where the AsyncAPI document is being served."
        description:
          type: string
          description:
            An optional string describing the host designated by the URL.
            CommonMark syntax MAY be used for rich text representation.
        protocol:
          type: string
          description:
            "The protocol this URL supports for connection. Supported protocol\
            \ include, but are not limited to: amqp, amqps, http, https, ibmmq, jms,\
            \ kafka, kafka-secure, anypointmq, mqtt, secure-mqtt, solace, stomp, stomps,\
            \ ws, wss, mercure, googlepubsub."
        protocolVersion:
          type: string
          description:
            "The version of the protocol used for connection. For instance:\
            \ AMQP 0.9.1, HTTP 2.0, Kafka 1.0.0, etc."
        variables:
          $ref: "#/components/schemas/serverVariables"
        security:
          type: array
          description:
            "A declaration of which security mechanisms can be used with
            this server. The list of values includes alternative security requirement
            objects that can be used. "
          items:
            $ref: "#/components/schemas/SecurityRequirement"
        bindings:
          $ref: "#/components/schemas/bindingsObject"
        tags:
          type: array
          description: A list of tags for logical grouping and categorization of servers.
          items:
            $ref: "#/components/schemas/tag"
          uniqueItems: true
      required:
        - protocol
        - url
    serverVariables:
      type: object
      additionalProperties:
        oneOf:
          - $ref: "#/components/schemas/Reference"
          - $ref: "#/components/schemas/serverVariable"
      description:
        A map between a variable name and its value. The value is used
        for substitution in the server's URL template.
    SecurityRequirement:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
        uniqueItems: true
      description:
        Lists of the required security schemes that can be used to execute
        an operation
    tag:
      type: object
      additionalProperties: false
      description: Allows adding meta data to a single tag.
      properties:
        name:
          type: string
          description: The name of the tag.
        description:
          type: string
          description: A short description for the tag.
        externalDocs:
          $ref: "#/components/schemas/externalDocs"
      required:
        - name
    externalDocs:
      type: object
      additionalProperties: false
      description: Allows referencing an external resource for extended documentation.
      properties:
        description:
          type: string
          description: A short description of the target documentation.
        url:
          type: string
          format: uri
          description:
            The URL for the target documentation. This MUST be in the form
            of an absolute URL.
      required:
        - url
    serverVariable:
      type: object
      additionalProperties: false
      description:
        An object representing a Server Variable for server URL template
        substitution.
      properties:
        enum:
          type: array
          description:
            An enumeration of string values to be used if the substitution
            options are from a limited set.
          items:
            type: string
          uniqueItems: true
        default:
          type: string
          description:
            "The default value to use for substitution, and to send, if\
            \ an alternate value is not supplied."
        description:
          type: string
          description: "An optional description for the server variable. "
        examples:
          type: array
          description: An array of examples of the server variable.
          items:
            type: string
    Category:
      type: string
      description: |
        The category of the topic. This can be used to group topics based on their characteristics.
      enum:
        - Layer 1
        - Ethernet
        - IP
        - SD-WAN
        - Computing
        - Storage
        - Memory
  securitySchemes:
    oauth2MEFLSOAPI:
      description: Default m2m client code
      flows:
        clientCredentials:
          refreshUrl: http://mef.net/example/refresh
          scopes:
            default: default scope
          tokenUrl: http://mef.net/example/token
      type: oauth2
