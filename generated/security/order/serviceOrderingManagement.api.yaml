openapi: 3.0.1
info:
  description: |
    **This file forms part of MEF W99** 

    **This specification represents MEF work in progress and is subject to
    change.** 

    Supported use cases:
    - Create Service Order
    - Retrieve List of Service Orders
    - Retrieve Service Order by Service Order Identifier
    - Register for Notifications

    Copyright 2023 MEF Forum and its contributors.

    This file includes content based on the TM Forum Service Order API (TMF641
    v4.1.0) available at https://github.com/tmforum-apis/TMF641_ServiceOrder,
    which is licensed by the TM Forum under the Apache License version 2.0. Such
    content has been modified by the MEF Forum and its contributors.
  title: Legato Service Ordering Management API
  version: 5.0.0-RC
servers:
  - url: 'https://{serverBase}/mefApi/legato/serviceOrderingManagement/v5/'
    variables:
      serverBase:
        default: mef.net
        description: The base of SOF's URL.
tags:
  - description: Operations for Service Order Resource
    name: Service Order
  - description: Endpoints to register and terminate an Event Listener
    name: Events subscription
paths:
  /serviceOrder:
    get:
      description: This operation retrieves list of ServiceOrder entities.
      operationId: listServiceOrder
      parameters:
        - description: State of the Service Order
          explode: true
          in: query
          name: state
          required: false
          schema:
            type: string
            enum:
              - acknowledged
              - rejected
              - pending
              - held
              - inProgress
              - completed
              - failed
              - partial
          style: form
        - description: Date when the order was created greater than
          explode: true
          in: query
          name: orderDate.gt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: Date when the order was created lesser than
          explode: true
          in: query
          name: orderDate.lt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: Effective completion date greater than
          explode: true
          in: query
          name: completionDate.gt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: Effective completion date lesser than
          explode: true
          in: query
          name: completionDate.lt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: Expected delivery date greater than
          explode: true
          in: query
          name: expectedCompletionDate.gt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: Expected delivery date lesser than
          explode: true
          in: query
          name: expectedCompletionDate.lt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: Date when the order was started for processing
          explode: true
          in: query
          name: startDate.gt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: Date when the order was started for processing
          explode: true
          in: query
          name: startDate.lt
          required: false
          schema:
            type: string
            format: date-time
          style: form
        - description: >-
            Requested index for start of item to be provided in response
            requested by the client. Note that the index starts with "0".
          explode: true
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
          style: form
        - description: >-
            Requested number of items to be provided in response requested by
            client
          explode: true
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
          style: form
      responses:
        '200':
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceOrder'
          description:
            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'
          headers:
            X-Pagination-Throttled:
              description: >
                Used to indicate that result page was throttled to maximum
                possible size  and there are additional results that can be
                fetched
              explode: false
              schema:
                type: boolean
              style: simple
            X-Total-Count:
              description: >
                The total number of matching items. E.g. if there are 50
                matching items in total, but the request has offset=10 and
                limit=10, then the X-Total-Count is 50.
              explode: false
              schema:
                type: integer
              style: simple
            X-Result-Count:
              description: The number of items included in the response
              explode: false
              schema:
                type: integer
              style: simple
        '400':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '500':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - listServiceOrder
      summary: List or find ServiceOrder objects
      tags:
        - Service Order
    post:
      description: This operation creates a ServiceOrder entity.
      operationId: createServiceOrder
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ServiceOrder_Create'
        description: The ServiceOrder to be created
        required: true
      responses:
        '201':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ServiceOrder'
          description:
            'Created (https://tools.ietf.org/html/rfc7231#section-6.3.2)'
        '400':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '422':
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error422'
          description:
            Unprocessable entity due to the business validation problems
        '500':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - createServiceOrder
      summary: Creates a ServiceOrder
      tags:
        - Service Order
  '/serviceOrder/{id}':
    get:
      description: This operation retrieves a ServiceOrder entity.
      operationId: retrieveServiceOrder
      parameters:
        - description: Identifier of the ServiceOrder
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ServiceOrder'
          description:
            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'
        '400':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        '500':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - retrieveServiceOrder
      summary: Retrieves a ServiceOrder by ID
      tags:
        - Service Order
  /hub:
    post:
      description: >-
        Sets the communication endpoint address the service instance must use
        to deliver information about its health state, execution state,
        failures and metrics.
      operationId: registerListener
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/EventSubscriptionInput'
        description:
          Data containing the callback endpoint to deliver the information
        required: true
      responses:
        '201':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Subscribed
        '400':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '500':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - registerListener
      summary: Register a listener
      tags:
        - Events subscription
      x-codegen-request-body-name: data
  '/hub/{id}':
    delete:
      description: >-
        Resets the communication endpoint address the service instance must use
        to deliver information about its health state, execution state,
        failures and metrics.
      operationId: unregisterListener
      parameters:
        - description: The id of the registered listener
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: Deleted
        '400':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        '401':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        '500':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - unregisterListener
      summary: Unregister a listener
      tags:
        - Events subscription
    get:
      description: This operation retrieves a EventSubscription entity.
      operationId: retrieveEventSubscription
      parameters:
        - description: Identifier of the EventSubscription
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Success
        '400':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        '500':
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - retrieveEventSubscription
      summary: Retrieves a EventSubscription by ID
      tags:
        - Events subscription
components:
  schemas:
    ServiceOrder_Common:
      type: object
      description: |
        A Service Order is used to request operations on a Service instance. A
        Service Order groups one or more one Service Order Items - one per
        specific action on a Service instance. The Action associated with the
        Service Order Item describes the operation (add, modify, delete) to be
        applied on the specified Service instance.The Service Order Item and its
        associated Action can operate on both existing (modify, delete) as well
        as future (add) Service instance.The Service Order is triggered from the
        Business Application (BA) system in charge of the Service Order
        management to the Service Orchestration Function (SOF) system that will
        orchestrate the Service fulfillment.

        This type defines all attributes common to objects used in request and
        response.
      properties:
        coordinatedAction:
          type: array
          description: >-
            The interval after the completion of one or more related Service
            Order Items that this Service Order Item can be started or
            completed
          items:
            $ref: '#/components/schemas/OrderCoordinatedAction'
        description:
          type: string
          description: A free-text description of the service order
        externalId:
          type: string
          description: ID given by the consumer to facilitate searches
        note:
          type: array
          description: >-
            Extra-information about the order; e.g. useful to add extra
            delivery information that could be useful for a human process
          items:
            $ref: '#/components/schemas/Note_BusSof'
        orderRelationship:
          type: array
          description: >-
            A list of service orders related to this order (e.g. prerequisite,
            dependent on)
          items:
            $ref: '#/components/schemas/ServiceOrderRelationship'
        relatedContactInformation:
          type: array
          description: >-
            Contact information of an individual or organization playing a role
            for this Service Order.

            For providing Notification Contact, `role=notificationContact` MUST
            be used.
          items:
            $ref: '#/components/schemas/RelatedContactInformation'
        requestedCompletionDate:
          type: string
          format: date-time
          description: Requested delivery date from the requestors perspective
        requestedStartDate:
          type: string
          format: date-time
          description: Order start date wished by the requestor
      required:
        - requestedCompletionDate
        - requestedStartDate
    ServiceOrder:
      allOf:
        - $ref: '#/components/schemas/ServiceOrder_Common'
        - type: object
          properties:
            href:
              type: string
              format: uri
              description: Hyperlink reference
            id:
              type: string
              description: unique identifier
            completionDate:
              type: string
              format: date-time
              description: Effective delivery date amended by the provider
            expectedCompletionDate:
              type: string
              format: date-time
              description: Expected delivery date amended by the provider
            serviceOrderItem:
              type: array
              description:
                A list of service order items to be processed by this order
              items:
                $ref: '#/components/schemas/ServiceOrderItem'
              minItems: 1
            startDate:
              type: string
              format: date-time
              description: Date when the order was started for processing
            state:
              $ref: '#/components/schemas/ServiceOrderStateType'
            orderDate:
              type: string
              format: date-time
              description: >-
                Date when the Service Order was created in the SOF's system and
                a Service Order Identifier was assigned
          required:
            - id
            - orderDate
            - serviceOrderItem
            - state
      description: >-
        A Service Order is used to request operations on a Service instance. A
        Service Order groups one or more one Service Order Items - one per
        specific action on a Service instance. The Action associated with the
        Service Order Item describes the operation (add, modify, delete) to be
        applied on the specified Service instance.The Service Order Item and
        its associated Action can operate on both existing (modify, delete) as
        well as future (add) Service instance.The Service Order is triggered
        from the Business Application (BA) system in charge of the Service
        Order management to the Service Orchestration Function (SOF) system
        that will orchestrate the Service fulfillment.
    ServiceOrder_Create:
      allOf:
        - $ref: '#/components/schemas/ServiceOrder_Common'
        - properties:
            serviceOrderItem:
              type: array
              description:
                A list of service order items to be processed by this order
              items:
                $ref: '#/components/schemas/ServiceOrderItem_Create'
              minItems: 1
          required:
            - serviceOrderItem
      description: >-
        A Service Order is used to request operations on a Service instance. A
        Service Order groups one or more one Service Order Items - one per
        specific action on a Service instance. The Action associated with the
        Service Order Item describes the operation (add, modify, delete) to be
        applied on the specified Service instance.The Service Order Item and
        its associated Action can operate on both existing (modify, delete) as
        well as future (add) Service instance.The Service Order is triggered
        from the Business Application (BA) system in charge of the Service
        Order management to the Service Orchestration Function (SOF) system
        that will orchestrate the Service fulfillment.

        This type extends `ServiceOrder_Common` and adds attributes specific to
        the request response.
    Note_BusSof:
      type: object
      description: >-
        Extra information about a given entity. Only useful in processes
        involving human interaction. Not applicable for an automated process.
      properties:
        author:
          type: string
          description: Author of the note
        date:
          type: string
          format: date-time
          description: Date of the note
        id:
          type: string
          description: >-
            Identifier of the note within its containing entity (may or may not
            be globally unique, depending on provider implementation)
        source:
          $ref: '#/components/schemas/BusSofType'
        text:
          type: string
          description: Text of the note
      required:
        - author
        - date
        - id
        - source
        - text
    BusSofType:
      type: string
      description: An enumeration with BUS and SOF values.
      enum:
        - bus
        - sof
    ServiceOrderRef:
      description: Reference to a Service Order instance.
      properties:
        href:
          type: string
          description: A hyperlink to the related order
        id:
          type: string
          description: The id of the related order
      required:
        - id
    ServiceOrderRelationship:
      type: object
      description:
        Reference to a related Service Order and the type of that association.
      properties:
        serviceOrder:
          $ref: '#/components/schemas/ServiceOrderRef'
        relationshipType:
          type: string
          description: >-
            Specifies the type (nature) of the relationship to the related
            Service. The nature of required relationships varies for Services
            of different types. For example, a UNI or ENNI Service may not have
            any relationships, but an Access E-Line may have two mandatory
            relationships (related to the UNI on one end and the ENNI on the
            other). More complex Services such as multipoint IP or Firewall
            Services may have more complex relationships. As a result, the
            allowed and mandatory `relationshipType` values are defined in the
            Service Specification.
      required:
        - relationshipType
        - serviceOrder
    ServiceOrderItem_Common:
      type: object
      description: >-
        An identified part of the order. A service order is decomposed into one
        or more order items. This type holds the attributes common to request
        and response representation of the Service Order Item.
      properties:
        id:
          type: string
          description: >-
            Identifier of the order item (generally it is a sequence number 01,
            02, 03, ...)
        action:
          $ref: '#/components/schemas/ServiceActionType'
        coordinatedAction:
          type: array
          description: >-
            The interval after the completion of one or more related Service
            Order Items that this Service Order Item can be started or
            completed
          items:
            $ref: '#/components/schemas/OrderItemCoordinatedAction'
        note:
          type: array
          description: >-
            Extra-information about the order item; e.g. useful to add extra
            delivery information that could be useful for a human process
          items:
            $ref: '#/components/schemas/Note_BusSof'
        service:
          $ref: '#/components/schemas/ServiceValue'
        serviceOrderItemRelationship:
          type: array
          description: |
            Specifies the type (nature) of the relationship to the related
            Service. The nature of required relationships varies for Services of
            different types. For example, a UNI or ENNI Service may not have any
            relationships, but an E-Line may have two mandatory
            relationships (related to the UNI on one end and the ENNI on the
            other). More complex Services such as multipoint IP or Firewall
            Services may have more complex relationships. As a result, the
            allowed and mandatory `relationshipType` values are defined in the
            Service Specification.
            Related items can be both from within the same Service Order or from
            other one. When referencing item within the same Service Order,
          items:
            $ref: '#/components/schemas/ServiceOrderItemRelationship'
      required:
        - action
        - id
        - service
    ServiceOrderItem_Create:
      allOf:
        - $ref: '#/components/schemas/ServiceOrderItem_Common'
        - type: object
          description: >
            An identified part of the order. A service order is decomposed into
            one or more order items. This type is used in the request.
    ServiceOrderItem:
      allOf:
        - $ref: '#/components/schemas/ServiceOrderItem_Common'
        - type: object
          description: |
            An identified part of the order. A service order is decomposed into
            one or more order items.
            The modelling pattern introduces the `Common` supertype to
            aggregate attributes that are common to both `ServiceOrderItem` and
            `ServiceOrderItem_Create`. The `Create` type has a subset of
            attributes of the response type and does not introduce any new,
            thus the `Create` type has an empty definition
          properties:
            state:
              $ref: '#/components/schemas/ServiceOrderStateType'
            terminationError:
              type: array
              description: >-
                When the SOF cannot process the request, the SOF returns a
                text-based list of reasons here.
              items:
                $ref: '#/components/schemas/TerminationError'
          required:
            - state
    RelatedContactInformation:
      type: object
      description: |
        Contact information of an individual or organization playing a role for
        this Order Item. The rule for mapping a represented attribute value to a
        `role` is to use the _lowerCamelCase_ pattern
      properties:
        emailAddress:
          type: string
          description: Email address
        name:
          type: string
          description: Name of the contact
        number:
          type: string
          description: Phone number
        numberExtension:
          type: string
          description: Phone number extension
        organization:
          type: string
          description: The organization or company that the contact belongs to
        postalAddress:
          $ref: '#/components/schemas/FieldedAddressValue'
        role:
          type: string
          description: A role the party plays in a given context.
      required:
        - emailAddress
        - name
        - number
        - role
    FieldedAddressValue:
      type: object
      description: >-
        A type of Address that has a discrete field and value for each type of
        boundary or identifier down to the lowest level of detail. For example
        "street number" is one field, "street name" is another field, etc.
        Reference: MEF 79 (Sn 8.9.2)
      properties:
        city:
          type: string
          description: The city that the address is in
        country:
          type: string
          description: Country that the address is in
        geographicSubAddress:
          $ref: '#/components/schemas/GeographicSubAddress'
        locality:
          type: string
          description: The locality that the address is in
        postcode:
          type: string
          description: >-
            Descriptor for a postal delivery area, used to speed and simplify
            the delivery of mail (also known as zip code)
        postcodeExtension:
          type: string
          description: >-
            An extension of a postal code. E.g. the part following the dash in
            a US urban property address
        stateOrProvince:
          type: string
          description: The State or Province that the address is in
        streetName:
          type: string
          description: Name of the street or other street type
        streetNr:
          type: string
          description: >-
            Number identifying a specific property on a public street. It may
            be combined with streetNrLast for ranged addresses. MEF 79 defines
            it as required however as in certain countries it is not used we
            make it optional in API.
        streetNrLast:
          type: string
          description:
            Last number in a range of street numbers allocated to a property
        streetNrLastSuffix:
          type: string
          description: Last street number suffix for a ranged address
        streetNrSuffix:
          type: string
          description: The first street number suffix
        streetSuffix:
          type: string
          description: A modifier denoting a relative direction
        streetType:
          type: string
          description: >-
            The type of street (e.g., alley, avenue, boulevard, brae, crescent,
            drive, highway, lane, terrace, parade, place, tarn, way, wharf)
      required:
        - city
        - country
        - streetName
    ServiceOrderItemRelationship:
      type: object
      description: |
        Specifies the type (nature) of the relationship to the related
        Service. The nature of required relationships varies for Services of
        different types. For example, a UNI or ENNI Service may not have any
        relationships, but an E-Line may have two mandatory
        relationships (related to the UNI on one end and the ENNI on the
        other). More complex Services such as multipoint IP or Firewall
        Services may have more complex relationships. As a result, the
        allowed and mandatory `relationshipType` values are defined in the
        Service Specification.
        Related item can be both from within the same Service Order or from
        other one. When referencing item from within the same Service Order,
        the `orderItem.serviceOrderId` and `orderItem.serviceOrderHref` MUST
        be empty.
      properties:
        orderItem:
          $ref: '#/components/schemas/ServiceOrderItemRef'
        relationshipType:
          type: string
          description: >-
            Specifies the nature of the relationship to the related Service
            Order Item. A string that is one of the relationship types
            specified in the Service Specification.
      required:
        - orderItem
        - relationshipType
    ServiceOrderItemRef:
      type: object
      description: >-
        A reference to a Service Order Item. When referencing item from within
        the same Service Order, the `serviceOrderId` and `serviceOrderHref`
        MUST be empty.
      properties:
        itemId:
          type: string
          description:
            Identifier of referenced item within the referenced Service Order
        serviceOrderHref:
          type: string
          description:
            Link to the order to which the referenced item belongs to
        serviceOrderId:
          type: string
          description:
            Identifier of the order to which the referenced item belongs to
      required:
        - itemId
    ServiceOrderStateType:
      type: string
      description: >
        Possible values for the state of a Service Order


        | State        |
        Description
        |

        | ------------ |

        |

        | acknowledged | A `ServiceOrder` request has been received and has
        passed message and basic validations and a _Success Response_ has been
        sent.                                                                                                                                                                                                                                                                                                                                                                                                                      
        |

        | rejected     | This state indicates that: <br>- Invalid information
        is provided through the `ServiceOrder` / `ServiceOrderItem` request
        <br>- The request fails to meet validation rules for `Service` delivery
        (processing) <br>If one `ServiceOrderItem` is rejected, then the entire
        `ServiceOrder` request is rejected and a _Error Response_ is
        sent.                                                                                                                                                                                                          
        |

        | inProgress   | This state indicates that all `ServiceOrderItems` have
        successfully passed the validations checks and the scheduled `Service`
        delivery/processing has started. <br> The `ServiceOrder` will be in
        _`inProgress`_ state if _at least one_ `ServiceOrderItem` is in
        _`inProgress`_
        state                                                                                                                                                                                                                                                               
        |

        | pending      | This state indicates that a `ServiceOrderItem` is
        currently in a waiting stage for an action/activity to be completed
        before the order-processing can progress further, pending order amend
        or cancel assessment. <br> A _`pending`_ state can lead into auto
        cancellation of an `ServiceOrderItem`, if no action is taken within the
        agreed timeframe.<br>The `ServiceOrder` will be in _`pending`_ state if
        _at least one_ `ServiceOrderItem` is in _`pending`_
        state                                                                              
        |

        | held         | This state indicates that a `ServiceOrderItem` cannot
        be progressed due to an issue. The `Service` delivery (processing) has
        been temporarily delayed to resolve an infrastructure shortfall to
        facilitate supply of order. Upon resolution of the issue, the
        `ServiceOrderItem` will continue to progress.<br> A _`held`_ state can
        lead into auto cancellation of an `ServiceOrderItem`, if no action is
        taken within the agreed timeframe.<br>The `ServiceOrder` will be in
        _`held`_ state if at least one `ServiceOrderItem` is in _`held`_ state
        |

        | failed       | This state indicates that `Service` delivery
        (processing) associated with a `ServiceOrderItem` has failed. This
        indicates an irrecoverable error as opposed to _`held`_ or _`pending`_
        issues.<br>The `ServiceOrder` will be in _`failed`_ state if at _ALL_
        `ServiceOrderItems` are in _`failed`_
        state                                                                                                                                                                                                                                             
        |

        | completed    | This state indicates that `Service` delivery
        (processing) associated with a `ServiceOrderItem` has completed.
        <br>The `ServiceOrder` will be in _`completed`_ state if at _ALL_
        `ServiceOrderItems` are in _`completed`_
        state                                                                                                                                                                                                                                                                                                                       
        |

        | partial      | This state indicates that some `ServiceOrderItem` are
        in _`completed`_ state while others are in _`cancelled`_ and/or
        _`failed`_ states, so the entire `ServiceOrder` is in a _`partial`_
        state.                                                                                                                                                                                                                                                                                                                                                     
        |
      enum:
        - acknowledged
        - rejected
        - pending
        - held
        - inProgress
        - completed
        - failed
        - partial
    ServiceStateType:
      type: string
      description: >
        Valid values for the lifecycle state of the Service.


        | State              |
        Description                                                                                                          
        |

        | ------------------ |
        ---------------------------------------------------------------------------------------------------------------------
        |

        | feasibilityChecked | Initial check whether the necessary resources
        are available and sufficient for the installation of a given
        service.   |

        | designed           | The Service is designed. The resources are
        identified and/or allocated, but not
        reserved.                             |

        | reserved           | All required resources for given service are
        reserved and
        ready.                                                     
        |

        | inactive           | The service is deactivated and is no longer
        available.                                                               
        |

        | active             | The service is fully available and
        active                                                                            
        |

        | terminated         | The service is 'logically deleted'. All
        associated resources are freed and made available for service to other
        users. |
      enum:
        - feasibilityChecked
        - designed
        - reserved
        - inactive
        - active
        - terminated
    ServiceRef:
      type: object
      description: Reference to a Service instance.
      properties:
        href:
          type: string
          description: Hyperlink reference to Service
        id:
          type: string
          description: unique identifier of Service
      required:
        - id
    ServiceValue:
      type: object
      description: ServiceValue is a base class for defining the Service.
      properties:
        href:
          type: string
          description: Hyperlink reference to a Service
        id:
          type: string
          description: unique identifier of a Service
        description:
          type: string
          description: Free-text description of the service
        externalId:
          type: string
          description: ID given by the consumer to facilitate searches
        startDate:
          type: string
          format: date-time
          description: Date when the service starts
        endDate:
          type: string
          format: date-time
          description: Date when the service ends
        state:
          $ref: '#/components/schemas/ServiceStateType'
        note:
          type: array
          description: A list of notes made on this service
          items:
            $ref: '#/components/schemas/Note_BusSof'
        serviceType:
          type: string
          description: Business type of the service
        name:
          type: string
          description: Name of the service
        serviceRelationship:
          type: array
          description: >-
            Specifies the type (nature) of the relationship to the related
            Service. The nature of required relationships varies for Services
            of different types. For example, a UNI or ENNI Service may not have
            any relationships, but an Access E-Line may have two mandatory
            relationships (related to the UNI on one end and the ENNI on the
            other). More complex Services such as multipoint IP or Firewall
            Services may have more complex relationships. As a result, the
            allowed and mandatory `relationshipType` values are defined in the
            Service Specification.
          items:
            $ref: '#/components/schemas/ServiceRelationship'
        relatedContactInformation:
          type: array
          description: >-
            Contact information of an individual or organization playing a role
            for this Service
          items:
            $ref: '#/components/schemas/RelatedContactInformation'
        place:
          type: array
          description: >-
            The relationships between this Service Order Item and one or more
            Places as defined in the Service Specification.
          items:
            $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        serviceConfiguration:
          $ref: '#/components/schemas/MefServiceConfiguration'
    ServiceRelationship:
      type: object
      description: >-
        A relationship to an existing Service. The requirements for usage for
        given Service are described in the Service Specification.
      properties:
        relationshipType:
          type: string
          description: |
            Specifies the type (nature) of the relationship to the related
            Service. The nature of required relationships varies for Services of
            different types. For example, a UNI or ENNI Service may not have any
            relationships, but an Access E-Line may have two mandatory
            relationships (related to the UNI on one end and the ENNI on the
            other). More complex Services such as multipoint IP or Firewall
            Services may have more complex relationships. As a result, the
            allowed and mandatory `relationshipType` values are defined in the
            Service Specification.
        service:
          $ref: '#/components/schemas/ServiceRef'
      required:
        - relationshipType
        - service
    RelatedPlaceRefOrValue:
      type: object
      description: A Place provided either by value or by reference
      discriminator:
        mapping:
          FieldedAddress: '#/components/schemas/FieldedAddress'
          FormattedAddress: '#/components/schemas/FormattedAddress'
          GeographicAddressLabel: '#/components/schemas/GeographicAddressLabel'
          GeographicAddressRef: '#/components/schemas/GeographicAddressRef'
          GeographicSiteRef: '#/components/schemas/GeographicSiteRef'
          GeographicPoint: '#/components/schemas/GeographicPoint'
        propertyName: '@type'
      properties:
        '@type':
          type: string
          description: >
            This field is used as a discriminator and is used between different
            place representations. This type might discriminate for additional
            related place as defined in '@schemaLocation'.
          enum:
            - FieldedAddress
            - FormattedAddress
            - GeographicAddressLabel
            - GeographicAddressRef
            - GeographicSiteRef
            - GeographicPoint
        '@schemaLocation':
          type: string
          format: uri
          description: >-
            A URI to a JSON-Schema file that defines additional attributes and
            relationships. May be used to define additional related place
            types.
        role:
          type: string
          description: Role of this place
      required:
        - '@type'
        - role
    FieldedAddress:
      allOf:
        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        - type: object
          properties:
            city:
              type: string
              description: The city that the address is in
            country:
              type: string
              description: Country that the address is in
            geographicSubAddress:
              $ref: '#/components/schemas/GeographicSubAddress'
            locality:
              type: string
              description: The locality that the address is in
            postcode:
              type: string
              description: >-
                Descriptor for a postal delivery area, used to speed and
                simplify the delivery of mail (also known as zip code)
            postcodeExtension:
              type: string
              description: >-
                An extension of a postal code. E.g. the part following the dash
                in a US urban property address
            stateOrProvince:
              type: string
              description: The State or Province that the address is in
            streetName:
              type: string
              description: Name of the street or other street type
            streetNr:
              type: string
              description: >-
                Number identifying a specific property on a public street. It
                may be combined with streetNrLast for ranged addresses. MEF 79
                defines it as required however as in certain countries it is
                not used we make it optional in API.
            streetNrLast:
              type: string
              description:
                Last number in a range of street numbers allocated to a
                property
            streetNrLastSuffix:
              type: string
              description: Last street number suffix for a ranged address
            streetNrSuffix:
              type: string
              description: The first street number suffix
            streetSuffix:
              type: string
              description: A modifier denoting a relative direction
            streetType:
              type: string
              description: >-
                The type of street (e.g., alley, avenue, boulevard, brae,
                crescent, drive, highway, lane, terrace, parade, place, tarn,
                way, wharf)
          required:
            - city
            - country
            - streetName
      description: >-
        A type of Address that has a discrete field and value for each type of
        boundary or identifier down to the lowest level of detail. For example
        "street number" is one field, "street name" is another field, etc.
        Reference: MEF 79 (Sn 8.9.2)
    FormattedAddress:
      allOf:
        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        - type: object
          properties:
            addrLine1:
              type: string
              description: The first address line in a formatted address
            addrLine2:
              type: string
              description: The second address line in a formatted address
            city:
              type: string
              description: The city that the address is in
            country:
              type: string
              description: Country that the address is in
            locality:
              type: string
              description: >-
                An area of defined or undefined boundaries within a local
                authority or other legislatively defined area, usually rural or
                semi-rural in nature
            postcode:
              type: string
              description: >-
                Descriptor for a postal delivery area, used to speed and
                simplify the delivery of mail (also known as ZIP code)
            postcodeExtension:
              type: string
              description: >-
                An extension of a postal code. E.g. the part following the dash
                in an US urban property address
            stateOrProvince:
              type: string
              description: The State or Province that the address is in
          required:
            - addrLine1
            - city
            - country
      description: >-
        A type of Address that has discrete fields for each type of boundary or
        identifier with the exception of street and more specific location
        details, which are combined into a maximum of two strings based on
        local postal addressing conventions. Reference: MEF 79 (Sn 8.9.3)
    GeographicAddressLabel:
      allOf:
        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        - type: object
          properties:
            externalReferenceId:
              type: string
              description: A reference to an address by id
            externalReferenceType:
              type: string
              description: >-
                Uniquely identifies the authority that specifies the addresses
                reference and/or its type (if the authority specifies more than
                one type of address). The value(s) to be used are to be agreed
                during the onboarding. For North American providers this would
                normally be CLLI (Common Language Location Identifier) code.
          required:
            - externalReferenceId
            - externalReferenceType
      description: >-
        A unique identifier controlled by a generally accepted independent
        administrative authority that specifies a fixed geographical location.
        Reference: MEF 79 (Sn 8.9.4)
    GeographicAddressRef:
      allOf:
        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        - type: object
          properties:
            href:
              type: string
              description: >
                Hyperlink to the referenced GeographicAddress. Hyperlink MAY be
                provided by the SOF in responses. Hyperlink MUST be ignored by
                the SOF in case it is provided by the BA in a request
            id:
              type: string
              description: >-
                Identifier of the referenced Geographic Address. This
                identifier is assigned during a successful address validation
                request (Geographic Address Validation API)
          required:
            - id
      description: >
        A reference to a Geographic Address resource available through Address
        Validation API.
    GeographicSiteRef:
      allOf:
        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        - type: object
          properties:
            href:
              type: string
              description: >
                Hyperlink to the referenced GeographicSite. Hyperlink MAY be
                provided by the SOF in responses. Hyperlink MUST be ignored by
                the SOF in case it is provided by the BA in a request
            id:
              type: string
              description: Identifier of the referenced Geographic Site.
          required:
            - id
      description: >
        A reference to a Geographic Site resource available through Service
        Site API
    GeographicSubAddress:
      type: object
      description:
        'Additional fields used to specify an address, as detailed as possible.'
      properties:
        buildingName:
          type: string
          description: >
            Allows for identification of places that require building name  as
            part of addressing information
        levelNumber:
          type: string
          description:
            'Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT
            2'
        levelType:
          type: string
          description: Describes level types within a building
        privateStreetName:
          type: string
          description: >-
            "Private streets internal to a property (e.g. a university) may
            have internal names that are not recorded by the land title office
        privateStreetNumber:
          type: string
          description: Private streets numbers internal to a private street
        subUnit:
          type: array
          description: >-
            Representation of a MEFSubUnit It is used for describing subunit
            within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER,
            UNIT, WHARF.
          items:
            $ref: '#/components/schemas/GeographicSubAddressUnit'
    GeographicPoint:
      allOf:
        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
        - type: object
          properties:
            spatialRef:
              type: string
              description: >-
                The spatial reference system used to determine the coordinates
                (e.g. "WGS84"). The system used and the value of this field are
                to be agreed during the onboarding process.
            x:
              type: string
              description: >-
                The latitude expressed in the format specified by the
                `spacialRef`
            'y':
              type: string
              description: >-
                The longitude expressed in the format specified by the
                `spacialRef`
            z:
              type: string
              description: >-
                The elevation expressed in the format specified by the
                `spacialRef`
          required:
            - spatialRef
            - x
            - 'y'
      description: >
        A GeographicPoint defines a geographic point through coordinates.
        Reference: MEF 79 (Sn 8.9.5)
    GeographicSubAddressUnit:
      type: object
      description: Allows for sub unit identification
      properties:
        subUnitNumber:
          type: string
          description: >-
            The discriminator used for the subunit, often just a simple number
            but may also be a range.
        subUnitType:
          type: string
          description: >-
            The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,
            UNIT, WHARF.
      required:
        - subUnitNumber
        - subUnitType
    MefServiceConfiguration:
      type: object
      description: >-
        MEFServiceConfiguration is used as an extension point for MEF specific
        service payload. The `@type` attribute is used as a discriminator
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
          description:
            The value of the "$id" as defined in the JSON schema of the
            service.
      required:
        - '@type'
    ServiceActionType:
      type: string
      description: |
        Action to be applied to the Service referred by this Service Order
        Item
      enum:
        - add
        - modify
        - delete
    EventSubscription:
      type: object
      description: |
        This resource is used to respond to notification subscriptions.
      properties:
        callback:
          type: string
          description: >-
            The value provided by in `EventSubscriptionInput` during
            notification registration
        id:
          type: string
          description: >-
            An identifier of this Event Subscription assigned when a resource
            is created.
        query:
          type: string
          description: >-
            The value provided by the `EventSubscriptionInput` during
            notification registration
      required:
        - callback
        - id
    EventSubscriptionInput:
      type: object
      description: This class is used to register for Notifications.
      properties:
        callback:
          type: string
          description: >-
            This callback value must be set to *host* property from Service
            Order Notification API (serviceOrderNotification.api.yaml). This
            property is appended with the base path and notification resource
            path specified in that API to construct an URL to which
            notification is sent. E.g. for "callback":
            "https://bus.com/listenerEndpoint", the service order state change
            event notification will be sent to:
            `https://bus.com/listenerEndpoint/mefApi/legato/serviceOrderingManagement/v5/listener/serviceOrderStateChangeEvent`
        query:
          type: string
          description: >-
            This attribute is used to define to which type of events to
            register to. Example: "query":"eventType =
            serviceOrderStateChangeEvent". To subscribe for more than one event
            type, put the values separated by comma:
            `eventType=serviceOrderStateChangeEvent,serviceOrderItemStateChangeEvent`.
            The possible values are enumerated by 'serviceOrderEventType' in
            serviceOrderNotification.api.yaml. An empty query is treated as
            specifying no filters - ending in subscription for all event types.
      required:
        - callback
    Error:
      type: object
      description: >
        Standard Class used to describe API response error Not intended to be
        used directly. The `code` in the HTTP header is used as a discriminator
        for the type of error returned in runtime.
      properties:
        message:
          type: string
          description: >-
            Text that provides mode details and corrective actions related to
            the error. This can be shown to a client user.
        reason:
          type: string
          description: >-
            Text that explains the reason for the error. This can be shown to a
            client user.
          maxLength: 255
        referenceError:
          type: string
          format: uri
          description: URL pointing to documentation describing the error
      required:
        - reason
    Error400:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/Error400Code'
          required:
            - code
      description:
        'Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)'
    Error400Code:
      type: string
      description: >-
        One of the following error codes:

        - missingQueryParameter: The URI is missing a required query-string
        parameter

        - missingQueryValue: The URI is missing a required query-string
        parameter value

        - invalidQuery: The query section of the URI is invalid.

        - invalidBody: The request has an invalid body
      enum:
        - missingQueryParameter
        - missingQueryValue
        - invalidQuery
        - invalidBody
    Error401:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/Error401Code'
          required:
            - code
      description:
        'Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)'
    Error401Code:
      type: string
      description: |-
        One of the following error codes:
        - missingCredentials: No credentials provided.
        - invalidCredentials: Provided credentials are invalid or expired
      enum:
        - missingCredentials
        - invalidCredentials
    Error403:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/Error403Code'
          required:
            - code
      description: >-
        Forbidden. This code indicates that the server understood the request
        but refuses to authorize it.
        (https://tools.ietf.org/html/rfc7231#section-6.5.3)
    Error403Code:
      type: string
      description: |-
        This code indicates that the server understood
        the request but refuses to authorize it because
        of one of the following error codes:
        - accessDenied: Access denied
        - forbiddenRequester: Forbidden requester
        - tooManyUsers: Too many users
      enum:
        - accessDenied
        - forbiddenRequester
        - tooManyUsers
    Error404:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              type: string
              description: >-
                The following error code:

                - notFound: A current representation for the target resource
                not found
              enum:
                - notFound
          required:
            - code
      description: >-
        Resource for the requested path not found.
        (https://tools.ietf.org/html/rfc7231#section-6.5.4)
    Error422:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              $ref: '#/components/schemas/Error422Code'
            propertyPath:
              type: string
              description: >
                A pointer to a particular property of the payload that caused
                the validation issue. It is highly recommended that this
                property should be used.

                Defined using JavaScript Object Notation (JSON) Pointer
                (https://tools.ietf.org/html/rfc6901).
          required:
            - code
      description: >-
        Unprocessable entity due to a business validation problem.
        (https://tools.ietf.org/html/rfc4918#section-11.2)
    Error422Code:
      type: string
      description: >
        One of the following error codes:

        - missingProperty: The property that was expected is not present in the
        payload

        - invalidValue: The property has an incorrect value

        - invalidFormat: The property value does not comply with the expected
        value format

        - referenceNotFound: The object referenced by the property cannot be
        identified in the target system

        - unexpectedProperty: Additional, not expected property has been
        provided

        - tooManyRecords: the number of records to be provided in the response
        exceeds the  threshold.

        - otherIssue: Other problem was identified (detailed information
        provided in a reason)
      enum:
        - missingProperty
        - invalidValue
        - invalidFormat
        - referenceNotFound
        - unexpectedProperty
        - tooManyRecords
        - otherIssue
    Error500:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            code:
              type: string
              description: >-
                The following error code:

                - internalError: Internal server error - the server encountered
                an unexpected condition that prevented it from fulfilling the
                request.
              enum:
                - internalError
          required:
            - code
      description: >-
        Internal Server Error.
        (https://tools.ietf.org/html/rfc7231#section-6.6.1)
    OrderCoordinatedAction:
      type: object
      description: >-
        The interval after the completion of one or more related Order that
        this Order can be started or completed
      properties:
        coordinatedActionDelay:
          $ref: '#/components/schemas/Duration'
        coordinationDependency:
          $ref: '#/components/schemas/OrderItemCoordinationDependencyType'
        orderId:
          type: string
          description:
            Specifies Order that is to be coordinated with this Order.
      required:
        - coordinatedActionDelay
        - coordinationDependency
        - orderId
    OrderItemCoordinatedAction:
      type: object
      description: >-
        The interval after the completion of one or more related Order Items
        that this Order Item can be started or completed
      properties:
        coordinatedActionDelay:
          $ref: '#/components/schemas/Duration'
        coordinationDependency:
          $ref: '#/components/schemas/OrderItemCoordinationDependencyType'
        itemId:
          type: string
          description:
            Specifies Order Item that is to be coordinated with this Order
            Item.
      required:
        - coordinatedActionDelay
        - coordinationDependency
        - itemId
    OrderItemCoordinationDependencyType:
      type: string
      description: >
        Possible values of the Order Item Coordination Dependency


        | OrderItemCoordinationDependencyType |
        Description                                                                                       
        |

        |-------------------------------------|----------------------------------------------------------------------------------------------------|

        | startToStart                        | Work on the Specified Order
        Item can only be started after the Coordinated Order Items are started
        |

        | startToFinish                       | The Coordinated Order Items
        must complete before work on the Specified Order Item
        begins           |

        | finishToStart                       | Work on the Related Order Items
        begins after the completion of the Specified Order Item            |

        | finishToFinish                      | Work on the Related Order Items
        completes at the same time as the Specified Order Item             |
      enum:
        - startToStart
        - startToFinish
        - finishToStart
        - finishToFinish
    Duration:
      type: object
      description:
        'A Duration in a given unit of time e.g. 3 hours, or 5 days.'
      properties:
        amount:
          type: integer
          description: 'Duration (number of seconds, minutes, hours, etc.)'
        units:
          $ref: '#/components/schemas/TimeUnit'
      required:
        - amount
        - units
    TimeUnit:
      type: string
      description: |
        Represents a unit of time.
      enum:
        - calendarMonths
        - calendarDays
        - calendarHours
        - calendarMinutes
        - businessDays
        - businessHours
        - businessMinutes
    TerminationError:
      type: object
      description: >-
        This indicates an error that caused an Item to be terminated. The code
        and propertyPath should be used like in Error422.
      properties:
        code:
          $ref: '#/components/schemas/Error422Code'
        propertyPath:
          type: string
          description: >
            A pointer to a particular property of the payload that caused the
            validation issue. It is highly recommended that this property
            should be used.

            Defined using JavaScript Object Notation (JSON) Pointer
            (https://tools.ietf.org/html/rfc6901).
        value:
          type: string
          description: Text to describe the reason of the termination.
  securitySchemes:
    oauth2MEFLSOAPI:
      description: Default m2m client code
      flows:
        clientCredentials:
          refreshUrl: 'http://mef.net/example/refresh'
          scopes:
            listServiceOrder: Scope for operation listServiceOrder
            createServiceOrder: Scope for operation createServiceOrder
            retrieveServiceOrder: Scope for operation retrieveServiceOrder
            registerListener: Scope for operation registerListener
            retrieveEventSubscription:
              Scope for operation retrieveEventSubscription
            unregisterListener: Scope for operation unregisterListener
          tokenUrl: 'http://mef.net/example/token'
      type: oauth2
