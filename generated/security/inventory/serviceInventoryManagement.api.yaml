openapi: 3.0.3
info:
  description: "**This file forms part of MEF 135** \n\nSupported use cases:\n- Retrieve\
    \ Service List\n- Retrieve Service by Identifier\n\nCopyright 2023 MEF Forum and\
    \ its contributors.\n\nThis file includes content based on the TM Forum Service\
    \ Inventory Management API (TMF638\nv4.0.1) available at https://github.com/tmforum-apis/TMF638_ServiceInventory,\n\
    which is licensed by the TM Forum under the Apache License version 2.0. Such\n\
    content has been modified by the MEF Forum and its contributors."
  title: Legato Service Inventory Management API
  version: 5.0.0
servers:
- url: "https://{serverBase}/mefApi/legato/serviceInventory/v5/"
  variables:
    serverBase:
      default: mef.net
      description: The base of SOF's URL.
security:
- oauth2MEFLSOAPI:
  - default
tags:
- description: Mechanisms for BUS to query and retrieve *ServiceInstances*.
  name: Service
- description: Endpoints to register and terminate an Event Listener
  name: Events subscription
paths:
  /service:
    get:
      deprecated: false
      description: This operation lists Service entities.
      operationId: serviceFind
      parameters:
      - description: The state of the service
        in: query
        name: state
        required: false
        schema:
          enum:
          - feasibilityChecked
          - designed
          - reserved
          - active
          - inactive
          - terminated
          type: string
      - description: Less than the date when the service was created (whatever its
          status)
        in: query
        name: serviceDate.lt
        required: false
        schema:
          format: date-time
          type: string
      - description: Greater than the date when the service was created (whatever
          its status)
        in: query
        name: serviceDate.gt
        required: false
        schema:
          format: date-time
          type: string
      - description: Less than the date when the service starts
        in: query
        name: startDate.lt
        required: false
        schema:
          format: date-time
          type: string
      - description: Greater than the date when the service starts
        in: query
        name: startDate.gt
        required: false
        schema:
          format: date-time
          type: string
      - description: Less than the date when the service ends
        in: query
        name: endDate.lt
        required: false
        schema:
          format: date-time
          type: string
      - description: Greater than the date when the service ends
        in: query
        name: endDate.gt
        required: false
        schema:
          format: date-time
          type: string
      - description: A reference to a service order related to this service. Must
          be used together with serviceOrderItem.id
        in: query
        name: serviceOrder.id
        required: false
        schema:
          type: string
      - description: A reference to a service order item related to this service.
          Must be used together with serviceOrder.id
        in: query
        name: serviceOrderItem.id
        required: false
        schema:
          type: string
      - description: An externalId provided in the service order
        in: query
        name: externalId
        required: false
        schema:
          type: string
      - description: A GeographicSite identifier which is associated to this service
        in: query
        name: geographicSite.id
        required: false
        schema:
          type: string
      - description: A GeographicAddress identifier which is associated to this service
        in: query
        name: geographicAddress.id
        required: false
        schema:
          type: string
      - description: Business type of the service
        in: query
        name: serviceType
        required: false
        schema:
          type: string
      - description: "This attribute is an enumerated integer that indicates how the\
          \ \nService is started, such as: 0: Unknown; 1: Automatically by \nthe managed\
          \ environment; 2: Automatically by the owning device; \n3: Manually by the\
          \ Provider of the Service; 4: Manually by a \nCustomer of the Provider;\
          \ 5: Any of the above"
        in: query
        name: startMode
        required: false
        schema:
          enum:
          - "0"
          - "1"
          - "2"
          - "3"
          - "4"
          - "5"
          type: string
      - description: Requested index for start of item to be provided in response
          requested by client. Note that the index starts with "0".
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
      - description: Requested number of items to be provided in response requested
          by client
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching items. E.g. if there are 50 matching items in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/Error422'
                type: array
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - serviceFind
      summary: Lists services
      tags:
      - Service
  /service/{id}:
    get:
      description: This operation retrieves a service entity.
      operationId: serviceGet
      parameters:
      - description: Identifier of the Service instance
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Service'
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - serviceGet
      summary: Retrieve a service
      tags:
      - Service
  /hub:
    post:
      description: "Sets the communication endpoint address the service instance must\
        \ use to deliver information about its health state, execution state, failures\
        \ and metrics."
      operationId: registerListener
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/EventSubscriptionInput'
        description: Data containing the callback endpoint to deliver the information
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Subscribed
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - registerListener
      summary: Register a listener
      tags:
      - Events subscription
  /hub/{id}:
    delete:
      description: "Resets the communication endpoint address the service instance\
        \ must use to deliver information about its health state, execution state,\
        \ failures and metrics."
      operationId: unregisterListener
      parameters:
      - description: The id of the registered listener
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Deleted
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - unregisterListener
      summary: Unregister a listener
      tags:
      - Events subscription
    get:
      description: This operation retrieves a hub entity.
      operationId: retrieveHub
      parameters:
      - description: Identifier of the Hub
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - retrieveHub
      summary: Retrieves a Hub by ID
      tags:
      - Events subscription
components:
  schemas:
    BusSofType:
      description: An enumeration with BUS and SOF values.
      enum:
      - bus
      - sof
      type: string
    Error:
      description: |
        Standard Class used to describe API response error Not intended to be used directly. The `code` in the HTTP header is used as a discriminator for the type of error returned in runtime.
      properties:
        message:
          description: Text that provides mode details and corrective actions related
            to the error. This can be shown to a client user.
          type: string
        reason:
          description: Text that explains the reason for the error. This can be shown
            to a client user.
          maxLength: 255
          type: string
        referenceError:
          description: URL pointing to documentation describing the error
          format: uri
          type: string
      required:
      - reason
      type: object
    Error400:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error400Code'
        required:
        - code
        type: object
      description: Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)
    Error400Code:
      description: |-
        One of the following error codes:
        - missingQueryParameter: The URI is missing a required query-string parameter
        - missingQueryValue: The URI is missing a required query-string parameter value
        - invalidQuery: The query section of the URI is invalid.
        - invalidBody: The request has an invalid body
      enum:
      - missingQueryParameter
      - missingQueryValue
      - invalidQuery
      - invalidBody
      type: string
    Error401:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error401Code'
        required:
        - code
        type: object
      description: Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)
    Error401Code:
      description: |-
        One of the following error codes:
        - missingCredentials: No credentials provided.
        - invalidCredentials: Provided credentials are invalid or expired
      enum:
      - missingCredentials
      - invalidCredentials
      type: string
    Error403:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error403Code'
        required:
        - code
        type: object
      description: Forbidden. This code indicates that the server understood the request
        but refuses to authorize it. (https://tools.ietf.org/html/rfc7231#section-6.5.3)
    Error403Code:
      description: |-
        This code indicates that the server understood
        the request but refuses to authorize it because
        of one of the following error codes:
        - accessDenied: Access denied
        - forbiddenRequester: Forbidden requester
        - tooManyUsers: Too many users
      enum:
      - accessDenied
      - forbiddenRequester
      - tooManyUsers
      type: string
    Error404:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: |-
              The following error code:
              - notFound: A current representation for the target resource not found
            enum:
            - notFound
            type: string
        required:
        - code
        type: object
      description: Resource for the requested path not found. (https://tools.ietf.org/html/rfc7231#section-6.5.4)
    Error422:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error422Code'
          propertyPath:
            description: |
              A pointer to a particular property of the payload that caused the validation issue. It is highly recommended that this property should be used.
              Defined using JavaScript Object Notation (JSON) Pointer (https://tools.ietf.org/html/rfc6901).
            type: string
        required:
        - code
        type: object
      description: Unprocessable entity due to a business validation problem. (https://tools.ietf.org/html/rfc4918#section-11.2)
    Error422Code:
      description: |
        One of the following error codes:
        - missingProperty: The property that was expected is not present in the payload
        - invalidValue: The property has an incorrect value
        - invalidFormat: The property value does not comply with the expected value format
        - referenceNotFound: The object referenced by the property cannot be identified in the target system
        - unexpectedProperty: Additional, not expected property has been provided
        - tooManyRecords: the number of records to be provided in the response exceeds the  threshold.
        - otherIssue: Other problem was identified (detailed information provided in a reason)
      enum:
      - missingProperty
      - invalidValue
      - invalidFormat
      - referenceNotFound
      - unexpectedProperty
      - tooManyRecords
      - otherIssue
      type: string
    Error500:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: |-
              The following error code:
              - internalError: Internal server error - the server encountered an unexpected condition that prevented it from fulfilling the request.
            enum:
            - internalError
            type: string
        required:
        - code
        type: object
      description: Internal Server Error. (https://tools.ietf.org/html/rfc7231#section-6.6.1)
    EventSubscription:
      description: |
        This resource is used to respond to notification subscriptions.
      properties:
        callback:
          description: The value provided by the BUS in `EventSubscriptionInput` during
            notification registration
          type: string
        id:
          description: An identifier of this Event Subscription assigned by the SOF
            when a resource is created.
          type: string
        query:
          description: The value provided by the BUS in `EventSubscriptionInput` during
            notification registration
          type: string
      required:
      - callback
      - id
      type: object
    EventSubscriptionInput:
      description: This class is used to register for Notifications.
      properties:
        callback:
          description: "This callback value must be set to *host* property from BUS\
            \ Service Inventory Notification API (serviceInventoryNotification.api.yaml).\
            \ This property is appended with the base path and notification resource\
            \ path specified in that API to construct an URL to which notification\
            \ is sent. E.g. for \"callback\": \"https://bus.com/listenerEndpoint\"\
            , the service state change event notification will be sent to: `https://bus.com/listenerEndpoint/mefApi/legato/serviceInventoryNotification/v5/listener/serviceStateChangeEvent`"
          type: string
        query:
          description: "This attribute is used to define to which type of events to\
            \ register to. Example: \"query\":\"eventType = serviceStateChangeEvent\"\
            . To subscribe for more than one event type, put the values separated\
            \ by comma: `eventType=serviceCreateEvent,serviceStateChangeEvent`. The\
            \ possible values are enumerated by 'ServiceEventType' in serviceInventoryNotification.api.yaml.\
            \ An empty query is treated as specifying no filters - ending in subscription\
            \ for all event types."
          type: string
      required:
      - callback
      type: object
    FieldedAddress:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          city:
            description: The city that the address is in
            type: string
          country:
            description: Country that the address is in
            type: string
          geographicSubAddress:
            $ref: '#/components/schemas/GeographicSubAddress'
          locality:
            description: The locality that the address is in
            type: string
          postcode:
            description: "Descriptor for a postal delivery area, used to speed and\
              \ simplify the delivery of mail (also known as zip code)"
            type: string
          postcodeExtension:
            description: An extension of a postal code. E.g. the part following the
              dash in a US urban property address
            type: string
          stateOrProvince:
            description: The State or Province that the address is in
            type: string
          streetName:
            description: Name of the street or other street type
            type: string
          streetNr:
            description: Number identifying a specific property on a public street.
              It may be combined with streetNrLast for ranged addresses. MEF 79 defines
              it as required however as in certain countries it is not used we make
              it optional in API.
            type: string
          streetNrLast:
            description: Last number in a range of street numbers allocated to a property
            type: string
          streetNrLastSuffix:
            description: Last street number suffix for a ranged address
            type: string
          streetNrSuffix:
            description: The first street number suffix
            type: string
          streetSuffix:
            description: A modifier denoting a relative direction
            type: string
          streetType:
            description: "The type of street (e.g., alley, avenue, boulevard, brae,\
              \ crescent, drive, highway, lane, terrace, parade, place, tarn, way,\
              \ wharf)"
            type: string
        required:
        - city
        - country
        - streetName
        type: object
      description: "A type of Address that has a discrete field and value for each\
        \ type of boundary or identifier down to the lowest level of detail. For example\
        \ \"street number\" is one field, \"street name\" is another field, etc. Reference:\
        \ MEF 79 (Sn 8.9.2)"
    FieldedAddressValue:
      description: "A type of Address that has a discrete field and value for each\
        \ type of boundary or identifier down to the lowest level of detail. For example\
        \ \"street number\" is one field, \"street name\" is another field, etc. Reference:\
        \ MEF 79 (Sn 8.9.2)"
      properties:
        city:
          description: The city that the address is in
          type: string
        country:
          description: Country that the address is in
          type: string
        geographicSubAddress:
          $ref: '#/components/schemas/GeographicSubAddress'
        locality:
          description: The locality that the address is in
          type: string
        postcode:
          description: "Descriptor for a postal delivery area, used to speed and simplify\
            \ the delivery of mail (also known as zip code)"
          type: string
        postcodeExtension:
          description: An extension of a postal code. E.g. the part following the
            dash in a US urban property address
          type: string
        stateOrProvince:
          description: The State or Province that the address is in
          type: string
        streetName:
          description: Name of the street or other street type
          type: string
        streetNr:
          description: Number identifying a specific property on a public street.
            It may be combined with streetNrLast for ranged addresses. MEF 79 defines
            it as required however as in certain countries it is not used we make
            it optional in API.
          type: string
        streetNrLast:
          description: Last number in a range of street numbers allocated to a property
          type: string
        streetNrLastSuffix:
          description: Last street number suffix for a ranged address
          type: string
        streetNrSuffix:
          description: The first street number suffix
          type: string
        streetSuffix:
          description: A modifier denoting a relative direction
          type: string
        streetType:
          description: "The type of street (e.g., alley, avenue, boulevard, brae,\
            \ crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf)"
          type: string
      required:
      - city
      - country
      - streetName
      type: object
    FormattedAddress:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          addrLine1:
            description: The first address line in a formatted address
            type: string
          addrLine2:
            description: The second address line in a formatted address
            type: string
          city:
            description: The city that the address is in
            type: string
          country:
            description: Country that the address is in
            type: string
          locality:
            description: "An area of defined or undefined boundaries within a local\
              \ authority or other legislatively defined area, usually rural or semi-rural\
              \ in nature"
            type: string
          postcode:
            description: "Descriptor for a postal delivery area, used to speed and\
              \ simplify the delivery of mail (also known as ZIP code)"
            type: string
          postcodeExtension:
            description: An extension of a postal code. E.g. the part following the
              dash in an US urban property address
            type: string
          stateOrProvince:
            description: The State or Province that the address is in
            type: string
        required:
        - addrLine1
        - city
        - country
        type: object
      description: "A type of Address that has discrete fields for each type of boundary\
        \ or identifier with the exception of street and more specific location details,\
        \ which are combined into a maximum of two strings based on local postal addressing\
        \ conventions. Reference: MEF 79 (Sn 8.9.3)"
    GeographicAddressLabel:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          externalReferenceId:
            description: A reference to an address by id
            type: string
          externalReferenceType:
            description: Uniquely identifies the authority that specifies the addresses
              reference and/or its type (if the authority specifies more than one
              type of address). The value(s) to be used are to be agreed during the
              onboarding. For North American providers this would normally be CLLI
              (Common Language Location Identifier) code.
            type: string
        required:
        - externalReferenceId
        - externalReferenceType
        type: object
      description: "A unique identifier controlled by a generally accepted independent\
        \ administrative authority that specifies a fixed geographical location. Reference:\
        \ MEF 79 (Sn 8.9.4)"
    GeographicAddressRef:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          href:
            description: |
              Hyperlink to the referenced GeographicAddress. Hyperlink MAY be provided by the SOF in responses. Hyperlink MUST be ignored by the SOF in case it is provided by the BA in a request
            type: string
          id:
            description: Identifier of the referenced Geographic Address. This identifier
              is assigned during a successful address validation request (Geographic
              Address Validation API)
            type: string
        required:
        - id
        type: object
      description: |
        A reference to a Geographic Address resource available through Address Validation API.
    GeographicPoint:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          spatialRef:
            description: The spatial reference system used to determine the coordinates
              (e.g. "WGS84"). The system used and the value of this field are to be
              agreed during the onboarding process.
            type: string
          x:
            description: The latitude expressed in the format specified by the `spacialRef`
            type: string
          "y":
            description: The longitude expressed in the format specified by the `spacialRef`
            type: string
          z:
            description: The elevation expressed in the format specified by the `spacialRef`
            type: string
        required:
        - spatialRef
        - x
        - "y"
        type: object
      description: |
        A MEFGeographicPoint defines a geographic point through coordinates. Reference: MEF 79 (Sn 8.9.5)
    GeographicSiteRef:
      allOf:
      - $ref: '#/components/schemas/RelatedPlaceRefOrValue'
      - properties:
          href:
            description: |
              Hyperlink to the referenced GeographicSite. Hyperlink MAY be provided by the SOF in responses. Hyperlink MUST be ignored by the SOF in case it is provided by the BA in a request
            type: string
          id:
            description: Identifier of the referenced Geographic Site.
            type: string
        required:
        - id
        type: object
      description: |
        A reference to a Geographic Site resource available through Service Site API
    GeographicSubAddress:
      description: "Additional fields used to specify an address, as detailed as possible."
      properties:
        buildingName:
          description: |
            Allows for identification of places that require building name  as part of addressing information
          type: string
        levelNumber:
          description: "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT\
            \ 2"
          type: string
        levelType:
          description: Describes level types within a building
          type: string
        privateStreetName:
          description: '"Private streets internal to a property (e.g. a university)
            may have internal names that are not recorded by the land title office'
          type: string
        privateStreetNumber:
          description: Private streets numbers internal to a private street
          type: string
        subUnit:
          description: "Used for describing subunit within a subAddress e.g. BERTH,\
            \ FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF."
          items:
            $ref: '#/components/schemas/GeographicSubAddressUnit'
          type: array
      type: object
    GeographicSubAddressUnit:
      description: Allows for sub unit identification
      properties:
        subUnitNumber:
          description: "The discriminator used for the subunit, often just a simple\
            \ number but may also be a range."
          type: string
        subUnitType:
          description: "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\
            \ UNIT, WHARF."
          type: string
      required:
      - subUnitNumber
      - subUnitType
      type: object
    MefServiceConfiguration:
      description: MefServiceConfiguration is used as an extension point for MEF specific
        service payload. The `@type` attribute is used as a discriminator
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          description: The value of the "$id" as defined in the JSON schema of the
            service.
          type: string
      required:
      - '@type'
      type: object
    Note_BusSof:
      description: Extra information about a given entity. Only useful in processes
        involving human interaction. Not applicable for an automated process.
      properties:
        author:
          description: Author of the note
          type: string
        date:
          description: Date of the note
          format: date-time
          type: string
        id:
          description: "Identifier of the note within its containing entity (may or\
            \ may not be globally unique, depending on provider implementation)"
          type: string
        source:
          $ref: '#/components/schemas/BusSofType'
        text:
          description: Text of the note
          type: string
      required:
      - author
      - date
      - id
      - source
      - text
      type: object
    RelatedContactInformation:
      description: |
        Contact information of an individual or organization playing a role for
        this Service. The rule for mapping a represented attribute value to a
        `role` is to use the _lowerCamelCase_ pattern.
      properties:
        emailAddress:
          description: Email address
          type: string
        name:
          description: Name of the contact
          type: string
        number:
          description: Phone number
          type: string
        numberExtension:
          description: Phone number extension
          type: string
        organization:
          description: The organization or company that the contact belongs to
          type: string
        postalAddress:
          $ref: '#/components/schemas/FieldedAddressValue'
        role:
          description: A role the party plays in a given context.
          type: string
      required:
      - emailAddress
      - name
      - number
      - role
      type: object
    RelatedPlaceRefOrValue:
      description: A Place provided either by value or by reference
      discriminator:
        mapping:
          FieldedAddress: '#/components/schemas/FieldedAddress'
          FormattedAddress: '#/components/schemas/FormattedAddress'
          GeographicAddressLabel: '#/components/schemas/GeographicAddressLabel'
          GeographicAddressRef: '#/components/schemas/GeographicAddressRef'
          GeographicSiteRef: '#/components/schemas/GeographicSiteRef'
          GeographicPoint: '#/components/schemas/GeographicPoint'
        propertyName: '@type'
      properties:
        '@type':
          description: |
            This field is used as a discriminator and is used between different place representations. This type might discriminate for additional related place as defined in '@schemaLocation'.
          enum:
          - FieldedAddress
          - FormattedAddress
          - GeographicAddressLabel
          - GeographicAddressRef
          - GeographicSiteRef
          - GeographicPoint
          type: string
        '@schemaLocation':
          description: A URI to a JSON-Schema file that defines additional attributes
            and relationships. May be used to define additional related place types.
          format: uri
          type: string
        role:
          description: Role of this place
          type: string
      required:
      - '@type'
      - role
      type: object
    Service:
      description: "The Service instance managed by SOF and retrievable by an BA over\
        \ the \nLegato IRP via the Service Inventory API."
      properties:
        description:
          description: Free-text description of the service
          type: string
        endDate:
          description: |
            Date when the service ends
          format: date-time
          type: string
        externalId:
          description: ID given by the consumer to facilitate searches
          type: string
        note:
          description: Extra-information about the order; e.g. useful to add extra
            delivery information that could be useful for a human process
          items:
            $ref: '#/components/schemas/Note_BusSof'
          type: array
        place:
          description: The relationships between this Service Order Item and one or
            more Places as defined in the Service Specification.
          items:
            $ref: '#/components/schemas/RelatedPlaceRefOrValue'
          type: array
        relatedContactInformation:
          description: Contact information of an individual or organization playing
            a role for this Service.
          items:
            $ref: '#/components/schemas/RelatedContactInformation'
          type: array
        serviceConfiguration:
          $ref: '#/components/schemas/MefServiceConfiguration'
        serviceDate:
          description: Date when the service was created (whatever its status).
          type: string
        serviceOrderItem:
          description: A list of service order items related to this service
          items:
            $ref: '#/components/schemas/ServiceOrderItemRef'
          type: array
        serviceRelationship:
          description: "Specifies the type (nature) of the relationship to the related\
            \ Service. The nature of required relationships varies for Services of\
            \ different types. For example, a UNI or ENNI Service may not have any\
            \ relationships, but an Access E-Line may have two mandatory relationships\
            \ (related to the UNI on one end and the ENNI on the other). More complex\
            \ Services such as multipoint IP or Firewall Services may have more complex\
            \ relationships. As a result, the allowed and mandatory `relationshipType`\
            \ values are defined in the Service Specification."
          items:
            $ref: '#/components/schemas/ServiceRelationship'
          type: array
        serviceType:
          description: Business type of the service
          type: string
        startDate:
          description: Date when the service starts
          format: date-time
          type: string
        startMode:
          $ref: '#/components/schemas/StartMode'
          description: "This attribute is an enumerated integer that indicates how\
            \ the \nService is started, such as: 0: Unknown; 1: Automatically by \n\
            the managed environment; 2: Automatically by the owning device; \n3: Manually\
            \ by the Provider of the Service; 4: Manually by a \nCustomer of the Provider;\
            \ 5: Any of the above"
        state:
          $ref: '#/components/schemas/ServiceStateType'
      type: object
    ServiceOrderItemRef:
      description: "A reference to a Service Order Item. When referencing item from\
        \ within the same Service Order, the `serviceOrderId` and `serviceOrderHref`\
        \ MUST be empty."
      properties:
        itemId:
          description: Identifier of referenced item within the referenced Service
            Order
          type: string
        serviceOrderHref:
          description: Link to the order to which the referenced item belongs to
          type: string
        serviceOrderId:
          description: Identifier of the order to which the referenced item belongs
            to
          type: string
      required:
      - itemId
      type: object
    ServiceRef:
      description: Reference to a Service instance.
      properties:
        href:
          description: Hyperlink reference to Service
          format: uri
          type: string
        id:
          description: unique identifier of Service
          type: string
      required:
      - id
      type: object
    ServiceRelationship:
      description: A relationship to an existing Service. The requirements for usage
        for given Service are described in the Service Specification.
      properties:
        relationshipType:
          description: |
            Specifies the type (nature) of the relationship to the related
            Service. The nature of required relationships varies for Services of
            different types. For example, a UNI or ENNI Service may not have any
            relationships, but an Access E-Line may have two mandatory
            relationships (related to the UNI on one end and the ENNI on the
            other). More complex Services such as multipoint IP or Firewall
            Services may have more complex relationships. As a result, the
            allowed and mandatory `relationshipType` values are defined in the
            Service Specification.
          type: string
        service:
          $ref: '#/components/schemas/ServiceRef'
      required:
      - relationshipType
      - service
      type: object
    ServiceStateType:
      description: |
        List of possible state for the Service.

        | State              | Description                                                                                                           |
        | ------------------ | --------------------------------------------------------------------------------------------------------------------- |
        | feasibilityChecked | Initial check whether the necessary resources are available and sufficient for the installation of a given service.   |
        | designed           | The Service is designed. The resources are identified and/or allocated, but not reserved.                             |
        | reserved           | All required resources for given service are reserved and ready.                                                      |
        | inactive           | The service is deactivated and is no longer available.                                                                |
        | active             | The service is fully available and active                                                                             |
        | terminated         | The service is 'logically deleted'. All associated resources are freed and made available for service to other users. |
      enum:
      - feasibilityChecked
      - designed
      - reserved
      - active
      - inactive
      - terminated
      type: string
    StartMode:
      description: "This attribute is an enumerated integer that indicates how the\
        \ \nService is started, such as: 0: Unknown; 1: Automatically by \nthe managed\
        \ environment; 2: Automatically by the owning device; \n3: Manually by the\
        \ Provider of the Service; 4: Manually by a \nCustomer of the Provider; 5:\
        \ Any of the above"
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      type: string
  securitySchemes:
    oauth2MEFLSOAPI:
      description: Default m2m client code
      flows:
        clientCredentials:
          refreshUrl: http://mef.net/example/refresh
          scopes:
            default: default scope
          tokenUrl: http://mef.net/example/token
      type: oauth2
