openapi: 3.0.3
info:
  description: "The Service Order API provides a standardized mechanism for managing\
    \ \n*ServiceOrders*. Using these APIs Business Applications (BUS) systems post\
    \ \n*ServiceOrder* requests to the **Service Order Management** system within\
    \ \nthe Service Orchestration Function (SOF).\n\nAdditionally, the APIs also allow\
    \ the BUS to query and retrieve \n*ServiceOrders* in  SOF and to register listeners\
    \ to be notified of changes \nto the *ServiceOrders*.  \n\n- MEF Developer Guide\
    \ Reference : MEF_W99 v1.0\n\n- TMF API Reference : TMF 641 v18.5.1\n\nCopyright\
    \ ï¿½ MEF 2020. All Rights Reserved"
  title: Legato Service Ordering API
  version: 4.0.0-RC
servers:
- url: "https://{server}:{port}{basePath}"
  variables:
    server:
      default: mef.net
    port:
      default: "8443"
      enum:
      - "8443"
      - "443"
    basePath:
      default: /mefApi/legato/serviceOrdering/v4
tags:
- description: "Mechanisms for BUS to create, query & retrieve *ServiceOrders*."
  name: ServiceOrder
- description: Mechanisms for BUS to subscribe/unsubscribe to *Notifications*.
  name: EventSubscriptionHub
paths:
  /serviceOrder:
    get:
      deprecated: false
      description: |-
        This operation returns a list of Service Order instances matching the
        query parameters from the Service Order management system maintained by
        the SOF. Attribute selection is possible using the ''fields'' parameter
        to filter retrieved attribute(s) for each Service Order instance.
        If an exception is encountered, then appropriate returnCode and error
        information is populated and returned as specified.
      operationId: serviceOrderFind
      parameters:
      - description: ' Filter by externalId'
        explode: true
        in: query
        name: externalId
        required: false
        schema:
          type: string
        style: form
      - description: ' State of the order(s) to be retrieved'
        explode: true
        in: query
        name: state
        required: false
        schema:
          $ref: '#/components/schemas/ServiceOrderStateType'
        style: form
      - description: |
          Category of the service order to be retrieved
        explode: true
        in: query
        name: category
        required: false
        schema:
          type: string
        style: form
      - description: Service Order date (creation) greather than
        explode: true
        in: query
        name: orderDate.gt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Service Order date (creation) lower than
        explode: true
        in: query
        name: orderDate.lt
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: "Comma-separated properties of the Service Order to be included\
          \ in \nthe returned response"
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: "Requested start index in a ordered list (sorted by id property)\
          \ of \nmatching Service Orders to be provided in response. "
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: "Requested maximum number of Service Orders to be provided \n\
          in the response"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceOrder'
                type: array
          description: Ok
          headers:
            X-Total-Count:
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Result-Count:
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Method Not Allowed
        "408":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request Time-out
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable entity
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: List service orders
      tags:
      - ServiceOrder
    post:
      deprecated: false
      description: |-
        This operation creates a Service Order instance in the Service Order
        management system maintained by the SOF. A Service Order is used to
        request operations on a Service instance. A Service Order groups one
        or more one Service Order Items - one per specific action on a Service
        instance. The Action associated with the Service Order Item describes
        the operation (add, remove, update) to be applied on the specified
        Service instance. The Service Order Item and its associated Action can
        operate on both existing (remove, update) as well as future (add)
        Service instance. The Service Order is triggered from the Business
        Application (BA) system in charge of the Product Order management to
        the Service Orchestration Function (SOF) system that will orchestrate
        the Service fulfillment. The assumption is that the Service
        Specifications describing the Service instance in the Service Order
        Item are already available (to both BA & SOF). If an exception is
        encountered, then appropriate returnCode and error information is
        populated and returned as specified.
      operationId: serviceOrderCreate
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ServiceOrderCreate'
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ServiceOrder'
          description: Created
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Method Not Allowed
        "408":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request Time-out
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable entity
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Create a service order
      tags:
      - ServiceOrder
  /serviceOrder/{id}:
    get:
      deprecated: false
      description: |-
        This operation retrieves a Service Order instance identified by the Id
        parameter from the Service Order managment system maintained by the SOF.
        Attribute selection is possible using the ''fields'' parameter to filter
        retrieved attribute(s) for the returned Service Order instance. If an
        exception is encountered, then appropriate returnCode and error
        information is populated and returned as specified.
      operationId: serviceOrderGet
      parameters:
      - description: Identifier of the ServiceOrder
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: "Comma-separated properties of the Service Order to be included\
          \ in \nthe returned response"
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ServiceOrder'
          description: Ok
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Method Not Allowed
        "408":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request Time-out
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable entity
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Retrieve a service order
      tags:
      - ServiceOrder
  /hub:
    post:
      deprecated: false
      description: Structure used to create a hub (to subscribe to notification
      operationId: hubCreate
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/EventSubscriptionInput'
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Created
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Method Not Allowed
        "408":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request Time-out
        "409":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Conflict
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Create Hub
      tags:
      - EventSubscriptionHub
  /hub/{hubId}:
    delete:
      deprecated: false
      description: Delete an existing Hub
      operationId: hubDelete
      parameters:
      - explode: false
        in: path
        name: hubId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Method Not Allowed
        "408":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request Time-out
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable entity
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: Delete Hub
      tags:
      - EventSubscriptionHub
    get:
      deprecated: false
      operationId: hubGet
      parameters:
      - explode: false
        in: path
        name: hubId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Ok
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "405":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Method Not Allowed
        "408":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request Time-out
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable entity
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      summary: get hub
      tags:
      - EventSubscriptionHub
components:
  responses:
    BadRequest:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    Unauthorized:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    Forbidden:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    NotFound:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    MethodNotAllowed:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Method Not Allowed
    RequestTimeout:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Request Time-out
    UnprocessableEntity:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unprocessable entity
    InternalServerError:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error
    ServiceUnavailable:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Service Unavailable
    Conflict:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
      description: Conflict
  schemas:
    ActionType:
      description: Action type to be described on the order item.
      enum:
      - add
      - modify
      - delete
      - noChange
      type: string
    Addressable:
      allOf:
      - $ref: '#/components/schemas/Extensible'
      - properties:
          name:
            description: Name of the API schema object instance.
            type: string
          id:
            description: "Unique identifier of the API schema object instance. The\
              \ \nID is invariant and is assigned by the server. In other words \n\
              this entity will have the same ID throught its lifetime."
            readOnly: true
            type: string
          href:
            description: URI reference of the API schema object instance.
            format: uri
            type: string
        type: object
      description: Base schema for all adressable API schema objects.
      required:
      - id
    AdminState:
      description: This enumeration is for Administrative states. Refer to ITU-T X.731.  Reference
        MCM-Types.
      properties:
        state:
          $ref: '#/components/schemas/State'
      type: object
    AggLinkDepth:
      description: "This is a pair of <VLAN ID, link depth> indicating that a given\
        \ VLAN ID maps to a given number of links in the Port Conversation ID to Aggregation\
        \ Link Map. Reference MEF-Types."
      properties:
        linkDepth:
          description: The number of links for the aggregation link.
          minimum: 1
          type: integer
        vlanId:
          $ref: '#/components/schemas/VlanId'
      type: object
    BandwidthProfilePerClassOfServiceName:
      description: "List of pairs of the form <x,y> where x is Class of Service Name\
        \ that is in the value of the EVC or OVC List of Class of Service Names Service\
        \ Attribute for the EVC or OVC that associates the EVC or OVC End Point and\
        \ y is BwpFlow.  Reference MEF 10.4 Section 10.9 EVC EP Class of Service Name\
        \ Ingres Bandwidth Profile Service Attribute and MEF 26.2 Section 16.12 Ingress\
        \ Bandwidth Profile per Class of Service Name Service Attribute."
      properties:
        bwpFlow:
          $ref: '#/components/schemas/BwpFlow'
        classOfServiceName:
          description: Class of Service Name.
          type: string
      type: object
    BandwidthProfilePerEquivalenceClassName:
      description: "List of pairs of the form <x,y> where x is an Egress Equivalence\
        \ Class Name and y has the value  BwpFlow.  Reference MEF 26.2 Section 16.13\
        \ Egress Bandwidth Profile per Egress Equivalence Class Name Service Attribute."
      properties:
        bwpFlow:
          $ref: '#/components/schemas/BwpFlow'
        egressEquivalenceClassName:
          description: Egress Equivalence Class Name. Reference MEF 26.2 Section 16.13
            Egress Bandwidth Profile per Egress Equiva-lence Class Name Service Attribute.
          type: string
      type: object
    BridgedAddresses:
      description: CTA - CEVLAN Tag Aware for VLAN-based services where the CE-VLAN
        ID is used to map a frame to a service. CTB - CVLAN Tag Blind for Port-based
        services where the CE-VLAN ID not used to map a frame to a service. CTB2 -  CVLAN
        Tag Blind Option 2 for point-to-point Port-based services that support the
        EPL Option 2 L2CP processing.
      enum:
      - CTA
      - CTB
      - CTB2
      type: string
    BwpFlow:
      description: "The BwpFlow object class represents the Bandwidth Profile Flow\
        \ which includes the bandwidth profile parameters such as CIR, CIRmax, EIR,\
        \ EIRmax, CBS, EBS, Coupling Flag, Color Mode, etc. The BwpFlow is associated\
        \ with one of CarrierEthernetOperatorUni, CarrierEthernetSub-scriberUni, CarrierEthernetVuni,\
        \ BandwidthProfilePerClassOfServiceName, BandwidthPro-filePerEecName; and\
        \ with Envelope. Reference MEF 10.4 Section 12 Bandwidth Profiles and MEF\
        \ 26.2 Section 17 Bandwidth Profiles."
      properties:
        eirMax:
          description: Attribute represents Maximum Excess Information Rate. Limits
            the average rate in bits per second at which Service Frames for this Bandwidth
            Profile Flow can be declared Yellow (regardless of unused excess bandwidth
            from higher-ranked Bandwidth Profile Flows or unused committed bandwidth).
          minimum: 0
          type: integer
        envelopeRank:
          description: This attribute denotes the rank of the bandwidth profile flow
            in the envelope.
          minimum: 0
          type: integer
        cirMax:
          description: Attribute represents Maximum Committed Information Rate. Limits
            the average rate in bits per second at which Service Frames for this Bandwidth
            Profile Flow can be declared Green (regardless of unused committed bandwidth
            from higher ranked Bandwidth Profile Flows).
          minimum: 0
          type: integer
        cbs:
          description: "Attribute represents Committed Burst Size. Limits by how much,\
            \ and for how long, the amount of traffic declared Green for this Bandwidth\
            \ Profile Flow in the short term can exceed the committed bandwidth made\
            \ available to this Band-width Profile Flow over the long term in bytes."
          minimum: 0
          type: integer
        couplingFlag:
          description: Attribute represents coupling flag. Determines whether unused
            committed bandwidth for this Bandwidth Profile Flow is made available
            as excess bandwidth for this Bandwidth Profile Flow or as commit-ted bandwidth
            for the next lower-ranked Bandwidth Profile Flow. 0/FALSE means overflow
            green tokens are used as green tokens in the next lowest BWP Flow in the
            Envelope. 1/TRUE means they are used as yellow tokens for this BWP Flow.
          type: boolean
        envelopeId:
          description: This attribute identifies the Envelope that the Bandwidth Profile
            belongs to.
          minimum: 0
          type: string
        tokenRequestOffset:
          description: Attribute represents Token Request Off-set. Adjusts the bandwidth
            consumed by each Service Frame in the Bandwidth Profile Flow relative
            to the length of the Service Frame.
          type: integer
        ebs:
          description: "Attribute represents Excess Burst Size. Limits by how much,\
            \ and for how long, the amount of traffic declared Yellow for this Bandwidth\
            \ Profile Flow in the short term can exceed the excess band- width made\
            \ available to this Bandwidth Profile Flow over the long term."
          minimum: 0
          type: integer
        colorMode:
          description: 'Attribute represents color mode. Indicates whether Service
            Frames for this Band-width Profile Flow that are identified as Yellow
            on input to the Bandwidth Profile Algorithm can be declared Green or not. '
          $ref: '#/components/schemas/ColorMode'
        cir:
          description: "Attribute represents Committed Information Rate. When added\
            \ to unused committed bandwidth provided from higher-ranked Bandwidth\
            \ Profile Flows (depending on the value of CF for the higher-ranked Bandwidth\
            \ Profile Flows), limits the average rate in bits per second at which\
            \ Service Frames for this Bandwidth Profile Flow can be declared Green."
          minimum: 0
          type: integer
        eir:
          description: "Attribute represents Excess Information Rate. When added to\
            \ unused excess bandwidth from higher-ranked Bandwidth Profile Flows,\
            \ and to un- used committed bandwidth* (depending on the value of CF for\
            \ this Bandwidth Profile Flow and CF0 for the Envelope), limits the average\
            \ rate in bits per second at which Service Frames for this Bandwidth Pro-\
            \ file Flow can be declared Yellow. "
          minimum: 0
          type: integer
      type: object
    CarrierEthernetEnni:
      allOf:
      - $ref: '#/components/schemas/MefServiceConfiguration'
      - $ref: '#/components/schemas/CarrierEthernetExternalInterface'
      - description: The ENNI is a reference point representing the boundary between
          two or more Operator CENs that are operated as separate administrative domains.
        properties:
          numberOfLinks:
            description: The number of physical links in the ENNI. Reference MEF 26.2
              Section 9.4 ENNI Number of Links Common Attribute.
            minimum: 1
            type: integer
          physicalLayer:
            description: The physical layer of each of the links supporting the ENNI.
              Reference MEF 26.1 Section 9.2 ENNI Physical Layer Common Attribute.
            items:
              $ref: '#/components/schemas/PhysicalLayer'
            minItems: 0
            type: array
          taggedL2cpFrameProcessing:
            $ref: '#/components/schemas/TaggedL2cpProcessing'
          enniService:
            description: Attribute pointing to CarrierEthernetEnniService.
            items:
              $ref: '#/components/schemas/CarrierEthernetEnniService'
            minItems: 1
            type: array
          peeringIdentifier:
            description: An identifier for the ENNI intended for operations purposes
              by the interconnecting Operators at the ENNI. Reference MEF 26.2 Section
              9.1 ENNI Peering Identifier Common Attribute.
            maxLength: 45
            type: string
        type: object
      x-discriminator-value: urn:mef:lso:spec:legato:CarrierEthernetEnni:v2.0.0:all
    CarrierEthernetEnniService:
      description: "This class represents the ENNI Service Attributes for an ENNI\
        \ used by a particular SP/SO. For each instance of an ENNI, there can be multiple\
        \ sets of ENNI Service Attributes. For each instance of an ENNI, there are\
        \ multiple sets of ENNI Service Attributes. The value for each ENNI Service\
        \ Attribute in a set for an Operator CEN is specific to a SP/SO that is using\
        \ the ENNI. Reference MEF 26.2 Section 13 ENNI Service Attributes."
      properties:
        maximumNumberOfOvcs:
          description: The maximum number of OVCs that the Operator CEN can support
            at the ENNI. Reference MEF 26.2 Section 13.3 Maximum Number of OVCs Service
            Attribute.
          type: integer
        maximumNumberOfOvcEndPointsPerOvc:
          description: The maximum number of OVC End Points that the Operator CEN
            can support at the ENNI for an OVC. Reference MEF 26.2 Section 13.4 Maximum
            Number of OVC End Points per OVC Service Attribute.
          type: integer
        ovcEndPoint:
          description: Pointer to CarrierEthernetOvcEnd-Point(s).
          items:
            $ref: '#/components/schemas/CarrierEthernetOvcEndPointRef'
          minItems: 0
          type: array
        operatorEnnIdentifier:
          description: An identifier for the ENNI intended for management purposes.
            Reference MEF 26.2 Section 13.1 Operator ENNI Identifier Service Attribute.
          maxLength: 45
          type: string
        svlanIdControl:
          $ref: '#/components/schemas/SvlanIdControl'
        tokenShare:
          description: An indication of the support of mapping more than one Bandwidth
            Profile Flow to an Envelope at the ENNI. Reference MEF 26.2 Section 13.5
            ENNI Token Share Service Attribute.
          $ref: '#/components/schemas/TokenShare'
        envelopes:
          items:
            $ref: '#/components/schemas/Envelope'
          minItems: 0
          type: array
        vuniList:
          description: Pointer to CarrierEthernetVirtualUnit(s).
          items:
            $ref: '#/components/schemas/CarrierEthernetVirtualUniRef'
          minItems: 0
          type: array
      type: object
    CarrierEthernetEnniServiceRef:
      properties:
        href:
          format: uri
          type: string
        id:
          format: uuid
          type: string
      type: object
    CarrierEthernetEvc:
      allOf:
      - $ref: '#/components/schemas/MefServiceConfiguration'
      - $ref: '#/components/schemas/CarrierEthernetService'
      - description: "An EVC is an association of two or more EVC End Points (EVC\
          \ EPs). Reference MEF 10.4 Section 7.8 Ethernet Virtual Connection, EVC\
          \ End Point and EVC EP Map Service Attribute."
        properties:
          identifier:
            description: Used to identify an EVC within the SP Network. Reference
              MEF 10.4 Section 8.1 EVC ID Service Attribute.
            maxLength: 45
            type: string
          evcEndPoints:
            description: Pointer to EvcEndPoint.
            items:
              $ref: '#/components/schemas/CarrierEthernetEvcEndPoint'
            minItems: 2
            type: array
        type: object
      x-discriminator-value: urn:mef:lso:spec:legato:CarrierEthernetEvc:v2.0.0:all
    CarrierEthernetEvcEndPoint:
      allOf:
      - $ref: '#/components/schemas/CarrierEthernetServiceEndPoint'
      description: An EvcEndPoint is a construct at a UNI that selects a subset of
        the Service Frames that pass over the UNI.An EvcEndPoint represents the logical
        attachment of an Evc to a UNI. Reference MEF 10.4 Section 10 EVC EP Service
        Attributes.
      properties:
        identifier:
          description: A string that is used to allow the Subscriber and Service Provider
            to uniquely identify the EvcEndPoint for operations purposes. Reference
            MEF 10.4 Section 10.1 EVC EP ID Service Attribute.
          maxLength: 45
          type: string
        subscriberMegMip:
          $ref: '#/components/schemas/MegLevel'
        role:
          description: Indicates how EI Frames mapped to the EVC End Point can be
            forwarded.  Reference MEF 10.4 Section 10.3 EVC EP Role Service Attribute.
          $ref: '#/components/schemas/EvcEndPointRole'
        evc:
          $ref: '#/components/schemas/CarrierEthernetEvcRef'
        egressMap:
          items:
            $ref: '#/components/schemas/EvcEpEgressMap'
          minItems: 0
          type: array
        egressBandwidthProfilePerCosName:
          description: "Used to limit the rate of all Egress Service Frames with a\
            \ given Class of Service Name, as determined at the ingress UNI for each\
            \ frame per the EVC EP Ingress Class of Service Map Service Attribute.\
            \ Reference MEF 10.4 Section 10.11 EVC EP Class of Service Name Egress\
            \ Band-width Profile Service Attribute."
          items:
            $ref: '#/components/schemas/ClassOfServiceEgressBandwidthProfile'
          minItems: 0
          type: array
        carrierEthernetSubscriberUni:
          $ref: '#/components/schemas/CarrierEthernetSubscriberUniRef'
        egressBandwidthProfilePerEndPoint:
          description: Attribute used to limit the rate of all Egress Service Frames
            mapped to an EVC EP at a UNI. Reference MEF 10.4 Section 10.10 EVC EP
            Egress Bandwidth Profile Service Attribute.
          items:
            $ref: '#/components/schemas/EgressBwpFlow'
          minItems: 0
          type: array
        evcEndPointMap:
          $ref: '#/components/schemas/VlanIdListOrUntag'
      type: object
    CarrierEthernetEvcEndPointRef:
      description: "First reference EVC, then specific EVC End Point"
      properties:
        evcRef:
          $ref: '#/components/schemas/CarrierEthernetEvcRef'
        id:
          description: Points to CarrierEthernetEvcEndPoint
          format: uuid
          type: string
      type: object
    CarrierEthernetEvcRef:
      properties:
        href:
          format: uri
          type: string
        id:
          format: uuid
          type: string
      type: object
    CarrierEthernetExternalInterface:
      description: "The CarrierEthernetExternalInterface represents the Physical Interface\
        \ used for EVC and OVC services. This is an abstract class and the super class.\
        \ It contains the common attributes of ENNI, Subscriber UNI."
      properties:
        aggregationLinkMap:
          items:
            $ref: '#/components/schemas/ConversationIdToAggregationLinkMap'
          minItems: 0
          type: array
        l2cpPeering:
          description: "Specifies the Layer 2 Control Protocols that are peered at\
            \ the EI, as described in MEF 45.1. Reference MEF 10.4 Section 9.17 Subscriber\
            \ UNI L2CP Peering Service Attribute, MEF 26.2 Section 10.1 ENNI L2CP\
            \ Peering Multilateral Attribute.  L2CP Peering applied to UNI and MEF\
            \ 26.2 Section 14.21 Operator UNI L2CP Peering Service Attribute."
          items:
            $ref: '#/components/schemas/L2cpPeering'
          minItems: 0
          type: array
        lagLinkMeg:
          description: "Indicates whether a LAG link MEG is instantiated on each physical\
            \ link in the EI, if the EI has more than one physical link. Reference\
            \ MEF 10.4 Section 9.15 Subscriber UNI LAG Link MEG Service Attribute,\
            \ MEF 26.2 Section 9.8 ENNI LAG Link MEG Common Attribute and MEF 26.2\
            \ Section 14.16 Operator UNI LAG Link MEG Service Attribute."
          $ref: '#/components/schemas/EnabledDisabled'
        operationalState:
          $ref: '#/components/schemas/OperationalState'
        linkOam:
          description: "Controls when and how Link OAM per IEEE Std 802.3-2015 is\
            \ run on the physi-cal links in the External Interface. Refer-ence MEF\
            \ 10.4 Section 9.13 Subscriber UNI Link OAM Service Attribute, MEF 26.2\
            \ Section 9.9 ENNI Link OAM Common Attribute and MEF 26.2 Section 14.14\
            \ Operator UNI Link OAM Service Attribute."
          $ref: '#/components/schemas/EnabledDisabled'
        externalInterfaceframeFormat:
          $ref: '#/components/schemas/EthernetFrameFormat'
        meg:
          description: "Indicates whether a MEP is instantiated at the EI for the\
            \ UNI MEG or ENNI MEG. Reference MEF 10.4 Section 9.14 Sub-scriber UNI\
            \ MEG Service Attribute, MEF 26.2 Section 9.7 ENNI MEG Common Attribute\
            \ and MEF 26.2 Section 14.15 Operator UNI MEG Service Attribute."
          $ref: '#/components/schemas/EnabledDisabled'
        maximumFrameSize:
          description: Specifies the maximum size of EI Frames that can be transmitted
            across EI. Reference MEF 10.4 Section 9.8 Subscriber UNI Maximum Service
            Frame Size Service Attribute. Reference MEF 26.2 Section 14.8 Operator
            UNI Maximum Service Frame Size Service Attribute. Reference MEF 26.2 Section
            10.3 ENNI Maximum Frame Size Multilateral Attribute.
          type: integer
        admininstrativeState:
          $ref: '#/components/schemas/AdminState'
        linkAggregation:
          $ref: '#/components/schemas/LinkAggregation'
      type: object
    CarrierEthernetOperatorUni:
      allOf:
      - $ref: '#/components/schemas/MefServiceConfiguration'
      - $ref: '#/components/schemas/CarrierEthernetUni'
      - description: This class represents the Operator UNI Service Attributes that
          are agreed on by the SP/SO and the Operator for each UNI.
        properties:
          egressBandwidthProfile:
            items:
              $ref: '#/components/schemas/BwpFlow'
            maxItems: 1
            minItems: 0
            type: array
          identifier:
            description: An identifier for the UNI intended for management purposes.
              Reference MEF 26.2 Section 14.1 Operator UNI Identifier Service Attribute.
            maxLength: 45
            type: string
          numberOfLinks:
            description: The number of physical links at the UNI. Reference MEF 26.2
              Section 14.4 Operator UNI Number of Links Service Attribute.
            minimum: 1
            type: integer
          defaultCeVlanId:
            $ref: '#/components/schemas/VlanId'
          physicalLayer:
            description: The physical layer of each of the links supporting the Operator
              UNI. Reference MEF 26.2 Section 14.2 Operator UNI Physical Layer Service
              Attribute.
            items:
              $ref: '#/components/schemas/PhysicalLayer'
            minItems: 0
            type: array
          ingressBandwidthProfile:
            items:
              $ref: '#/components/schemas/BwpFlow'
            maxItems: 1
            minItems: 0
            type: array
          ovcEndPoint:
            items:
              $ref: '#/components/schemas/CarrierEthernetOvcEndPointRef'
            minItems: 0
            type: array
          elmi:
            $ref: '#/components/schemas/Elmi'
          synchronousMode:
            items:
              $ref: '#/components/schemas/SyncModePerLink'
            minItems: 1
            type: array
        type: object
      x-discriminator-value: urn:mef:lso:spec:legato:CarrierEthernetOperatorUni:v2.0.0:all
    CarrierEthernetOperatorUniRef:
      properties:
        href:
          format: uri
          type: string
        id:
          format: uuid
          type: string
      type: object
    CarrierEthernetOvc:
      allOf:
      - $ref: '#/components/schemas/MefServiceConfiguration'
      - $ref: '#/components/schemas/CarrierEthernetService'
      - description: The Operator Virtual Connection (OVC) is the building block for
          constructing an EVC spanning multiple Operator CENs.  Reference MEF 26.2
          Section 8.8 Operator Virtual Connection.
        properties:
          identifier:
            description: An identifier for the OVC intended for managment purposes.
              Reference MEF 26.2 Section 12.1 OVC Identifier Service Attribute.
            maxLength: 45
            type: string
          ovcCeVlanIdPreservation:
            $ref: '#/components/schemas/VlanIdPreservation'
          endPointList:
            description: A list of OVC End Points associated by the OVC. Reference
              MEF 26.2 Section 12.3 OVC End Point List Service Attribute.
            items:
              $ref: '#/components/schemas/CarrierEthernetOvcEndPoint'
            minItems: 2
            type: array
          ovcSvlanDeiPreservation:
            $ref: '#/components/schemas/OvcSvlanDeiPreservation'
          maximumNumberOfEnniOvcEndPoints:
            description: The bound on the number of OVC End Points at ENNIs that can
              be associated by the OVC.
            minimum: 1
            type: integer
          frameDelivery:
            $ref: '#/components/schemas/FrameDisposition'
          ovcCeVlanPcpPreservation:
            $ref: '#/components/schemas/OvcCeVlanPcpPreservation'
          ovcL2cpAddressSet:
            $ref: '#/components/schemas/L2cpAddressSet'
          ovcCeVlanDeiPreservation:
            $ref: '#/components/schemas/OvcCeVlanDeiPreservation'
          listOfClassOfServiceNames:
            description: A list of Class of Service Names. Reference MEF 26.2 Section
              12.12 OVC List of Class of Service Names Service Attribute.
            items:
              type: string
            minItems: 1
            type: array
          ovcSvlanPcpPreservation:
            $ref: '#/components/schemas/OvcSvlanPcpPreservation'
          ovcType:
            $ref: '#/components/schemas/ConnectionType'
          maximumNumberOfUniOvcEndPoints:
            description: The bound on the number of OVC End Points at different UNIs
              that can be associated by the OVC. Reference MEF 26.2 Section 12.4 Maximum
              Number of UNI OVC End Points Service Attribute.
            minimum: 0
            type: integer
          maximumFrameSize:
            description: This attributes denotes the maximum frame size in bytes.
              For EVC it is >=1522. For OVC it is >=1526.
            type: integer
        type: object
      x-discriminator-value: urn:mef:lso:spec:legato:CarrierEthernetOvc:v2.0.0:all
    CarrierEthernetOvcEndPoint:
      allOf:
      - $ref: '#/components/schemas/CarrierEthernetServiceEndPoint'
      description: An OVC End Point is a logical entity at a given External Interface
        that is associated with a distinct set of frames passing over the External
        Interface. Reference MEF 26.2 Section 16 OVC End Point Service Attributes.
      properties:
        endPointMap:
          $ref: '#/components/schemas/OvcEndPointMap'
        identifier:
          description: An identifier for the OVC End Point intended for operating
            purposes. Reference MEF 26.2 Section 16.1 OVC End Point Identfier Service
            Attribute.
          maxLength: 45
          type: string
        egressEquivalenceClassIdentifier:
          $ref: '#/components/schemas/EecMap'
        egressBandwidthProfilePerEec:
          description: "For each EEC Name listed, Bandwidth Profile Flow parameters,\
            \ for all egress EI Frames mapped to that EEC Name at the OVC End Point.\
            \ Reference MEF 26.2 Section 16.13 Egress Bandwidth Profile per Egress\
            \ Equivalence Class Name Service Attribute."
          items:
            $ref: '#/components/schemas/BandwidthProfilePerEquivalenceClassName'
          minItems: 0
          type: array
        aggregationLinkDepth:
          description: The number of ENNI links that can carry ENNI Frames for each
            S-VLAN ID mapped to the OVC End Point.  Reference MEF 26.2 Section 16.14
            OVC End Point Aggregation Link Depth Service Attribute.
          items:
            $ref: '#/components/schemas/AggLinkDepth'
          maxItems: 1
          minItems: 0
          type: array
        maintenanceIntermediatePoint:
          $ref: '#/components/schemas/MaintenanceIntermediatePoint'
        role:
          $ref: '#/components/schemas/OvcEndPointRole'
        egressMap:
          items:
            $ref: '#/components/schemas/OvcEpEgressMap'
          minItems: 0
          type: array
        egressBandwidthProfilePerEndPoint:
          description: Bandwidth Profile Flow parameters for all egress EI Frames
            mapped to the OVC End Point Reference MEF 26.2 Section 16.11 Egress Bandwidth
            Profile per OVC End Point Service Attribute.
          items:
            $ref: '#/components/schemas/BwpFlow'
          maxItems: 1
          minItems: 0
          type: array
        virtualUni:
          items:
            $ref: '#/components/schemas/CarrierEthernetVirtualUniRef'
          maxItems: 1
          minItems: 0
          type: array
        enniService:
          items:
            $ref: '#/components/schemas/CarrierEthernetEnniServiceRef'
          maxItems: 1
          minItems: 0
          type: array
        operatorUni:
          items:
            $ref: '#/components/schemas/CarrierEthernetOperatorUniRef'
          maxItems: 1
          minItems: 0
          type: array
        ovc:
          $ref: '#/components/schemas/CarrierEthernetOvcRef'
        maintenanceEndPointList:
          description: The MEPs enable for the OVC End Point.  Reference MEF 26.2
            Section 16.17 OVC End Point Maintenance End Point List Service Attribute.
          items:
            $ref: '#/components/schemas/MepLevelAndDirection'
          maxItems: 1
          minItems: 0
          type: array
      type: object
    CarrierEthernetOvcEndPointRef:
      description: "First reference OVC, then specific OVC End Point"
      properties:
        ovcRef:
          $ref: '#/components/schemas/CarrierEthernetOvcRef'
        id:
          description: Points to CarrierEthernetOvcEndPoint
          format: uuid
          type: string
      type: object
    CarrierEthernetOvcRef:
      properties:
        href:
          format: uri
          type: string
        id:
          format: uuid
          type: string
      type: object
    CarrierEthernetService:
      description: The CarrierEthernetService represents the EVC or the OVC.  This
        is an abstract class and the super class of Evc and Ovc.  It contains the
        common attributes of Evc and Ovc.
      properties:
        cTagPcpPreservation:
          description: Whether the value of the PCP field in the C-Tag in Ingress
            EI Frames is preserved when the Egress EI Frame also has a C-Tag. Reference
            MEF 26.2 Section 12.8 OVC CE-VLAN PCP Preservation Service Attribute and
            MEF 10.4 Section 8.5 EVC C-Tag PCP Preservation Service Attribute.
          $ref: '#/components/schemas/EnabledDisabled'
        cTagDeiPreservation:
          description: Whether the value of the DEI field in the C-Tag in Ingress
            Frames is preserved when the Egress EI Frame also has C-Tag. Reference
            MEF 26.2 Section 12.9 OVC CE-VLAN ID DEI Preservation Service Attribute
            and MEF 10.4 Section 8.6 EVC C-Tag DEI Preservation Service Attribute.
          $ref: '#/components/schemas/EnabledDisabled'
        administrativeState:
          $ref: '#/components/schemas/AdminState'
        listOfCosNames:
          description: Used to specify all the Class of Service Names supported by
            an EVC or OVC. Reference MEF 10.4 Section 8.7 EVC List of Class of Service
            Names Service Attribute. The Class of Service Names supported by the OVC.
            Reference MEF 26.2 Section 12.12 OVC List of Class of Service Names Service
            Attribute.
          items:
            type: string
          minItems: 1
          type: array
        frameDisposition:
          $ref: '#/components/schemas/FrameDisposition'
        availableMegLevel:
          description: "The lowest MEG level for which SOAM Frames are not peered\
            \ or discarded by the SP or Operator. If this attribute is not present\
            \ there is no such level (that is, SOAM frames are all MEG levels may\
            \ be peered or discarded by the SP or Opera-tor). Reference MEF 10.4 Section\
            \ 8.11 EVC Available MEG Level Service Attribute and MEF 26.2 Section\
            \ 12.15 OVC Available MEF Level Service Attribute."
          items:
            $ref: '#/components/schemas/MegLevel'
          maxItems: 1
          minItems: 0
          type: array
        operationalState:
          $ref: '#/components/schemas/OperationalState'
        connectionType:
          $ref: '#/components/schemas/ConnectionType'
        carrierEthernetSls:
          description: "Technical details of the service level in terms of Performance\
            \ Objectives, agreed between the Service Provider and the Subscriber or\
            \ between Service Provider and the Operator as part of the Service Level\
            \ Agreement. A given SLS might contain 0,1 or more Performance Objec-tives\
            \ for each Performance Metric.  Ref-erence MEF 10.4 Section 8.8 EVC Ser-vice\
            \ Level Specification Service Attribute and MEF 26.2 Section 12.13 OVC\
            \ Service Level Specification Service Attribute."
          items:
            $ref: '#/components/schemas/carrierEthernetSls'
          maxItems: 1
          minItems: 0
          type: array
        maximumFrameSize:
          description: Maximum size of EI frames that can be carried over the EVC
            or OVC. Reference MEF 10.4 Section 8.10 EVC Maximum Service Frame Size
            Service Attribute and MEF 26.2 Section 12.6 OVC Maximum Frame Size Service
            Attribute.
          type: integer
      type: object
    CarrierEthernetServiceEndPoint:
      description: The CarrierEthernetServiceEndPoint represents the EVC End Point
        or the OVC End Point.  This is an abstract class and the super class of EvcEndPoint
        and OvcEndPoint.  It contains the common attributes of EvcEndPoint and OvcEndPoint.
      properties:
        administrativeState:
          $ref: '#/components/schemas/AdminState'
        ingressBandwidthProfilePerCosName:
          description: "For each CoS Name listed, Bandwidth Profile Flow parameters\
            \ for all ingress EI Frames mapped to that CoS Name at the EVC End Point\
            \ or OVC End Point. Reference MEF 26.2 Section 16.12 Ingress Bandwidth\
            \ Profile per Class of Service Name Service and MEF 10.4 Section 10.9\
            \ EVC EP Class of Service Name Ingress Bandwidth Profile Service Attribute."
          items:
            $ref: '#/components/schemas/BandwidthProfilePerClassOfServiceName'
          minItems: 0
          type: array
        ingressBandwidthProfilePerEndPoint:
          description: Bandwidth Profile Flow parameters for all ingress EI Frames
            mapped to the OVC End Point or EVC End Point. Reference MEF 26.2 Section
            16.10 Ingress Band-width Profile per OVC End Point Service Attribute.
            Reference MEF 10.4 Section 10.8 EVC EP Ingress Bandwidth Profile Service
            Attribute. The absence of this attribute corresponds to a Service Attrib-ute
            of None.
          items:
            $ref: '#/components/schemas/BwpFlow'
          maxItems: 1
          minItems: 0
          type: array
        operationalState:
          $ref: '#/components/schemas/OperationalState'
        colorMap:
          $ref: '#/components/schemas/ColorIdentifier'
        ingressClassOfServiceMap:
          $ref: '#/components/schemas/CosMap'
        sourceMacAddressLimit:
          description: Specifies a limit on the number of differ-ent Source MAC address
            for which in-gress EI Frames at this EVC End Point or OVC End Point will
            be delivered. The absence of this attribute corresponds to a Service Attribute
            value of None. Refer-ence MEF 10.4 Section 10.12 EVC EP Source MAC Address
            Limit Service At-tribute and MEF 26.2 Section 16.15 OVC End Point Source
            MAC Address Limit Service Attribute.
          items:
            $ref: '#/components/schemas/SourceMacAddressLimit'
          maxItems: 1
          minItems: 0
          type: array
      type: object
    CarrierEthernetSls:
      allOf:
      - $ref: '#/components/schemas/MefServiceConfiguration'
      - description: Schema for MEF Carrier Ethernet Service Level Specification used
          service provisioning
        properties:
          slsCosNameEntry:
            description: Pointer to SlsCosNameEntry.
            items:
              $ref: '#/components/schemas/SlsCosNameEntry'
            minItems: 1
            type: array
          timeInterval:
            $ref: '#/components/schemas/TimeIntervalT'
          startTime:
            $ref: '#/components/schemas/TimeAndDate'
      x-discriminator-value: urn:mef:lso:spec:legato:CarrierEthernetSls:v2.0.0:all
    CarrierEthernetSubscriberUni:
      allOf:
      - $ref: '#/components/schemas/MefServiceConfiguration'
      - $ref: '#/components/schemas/CarrierEthernetUni'
      - description: The Ethernet User Network Interface demarcation point between
          the responsibility of the Service Provider and the responsibility of the
          Subscriber. Reference MEF 10.4 Section 9. Subscriber UNI Service Attributes.
        properties:
          identifier:
            description: String that is used to allow the Subscriber and Service Provider
              to uniquely identify the UNI for operations purposes. Reference MEF
              10.4 Section 9.1 Subscriber UNI ID Service Attribute.
            maxLength: 45
            type: string
          listOfPhyLinks:
            items:
              $ref: '#/components/schemas/SubscriberUniPhysicalLinks'
            minItems: 0
            type: array
          virtualFrameMap:
            items:
              $ref: '#/components/schemas/VirtualFrameMap'
            maxItems: 1
            minItems: 0
            type: array
          evcEndPoint:
            items:
              $ref: '#/components/schemas/CarrierEthernetEvcEndPointRef'
            minItems: 0
            type: array
          instantiation:
            description: The value is either Physical or Virtual. Reference MEF 10.4
              Section 9.2 Subscriber UNI Instantiation Service Attribute.
            $ref: '#/components/schemas/Instantiation'
        type: object
      x-discriminator-value: urn:mef:lso:spec:legato:CarrierEthernetSubscriberUni:v2.0.0:all
    CarrierEthernetSubscriberUniRef:
      properties:
        href:
          format: uri
          type: string
        id:
          format: uuid
          type: string
      type: object
    CarrierEthernetUni:
      allOf:
      - $ref: '#/components/schemas/CarrierEthernetExternalInterface'
      description: The Uni represents the Physical Interface used for EVC and OVC
        services with common attributes. This is an abstract class and the super class.
        It contains the common attributes of Operator UNI and Subscriber UNI.
      properties:
        maximumNumberOfEndPoints:
          description: An integer greater than or equal to 1 that limits the number
            of EVC End Points that can be located at the UNI. Reference MEF 10.4 Section
            9.9 Subscriber UNI Maximum Number of EVC EPs Service Attribute. The maximum
            number of OVC End Points that the Operator CEN can support at the UNI.  Reference
            MEF 26.2 Section 14.10 Operator UNI Maximum Number of OVC End Points Service
            Attribute.
          minimum: 1
          type: integer
        maxNumOfCtagVlanIdsPerEndPoint:
          description: An integer greater than or equal to 1 that limits the number
            of C-Tag VLAN IDs that can map to each EVC End Point. Reference MEF 10.4
            Section 9.10 Subscriber UNI Maximum Number of C-Tag VLAN IDs per EVC EP
            Service Attribute. The maximum number of CE-VLAN ID values that can be
            mapped to an OVC End Point by the Operator CEN at the UNI. Reference MEF
            26.2 Section 14.11 Operator UNI Maximum Number of CE-VLAN IDs per OVC
            End Point Service Attribute.
          maximum: 4094
          minimum: 1
          type: integer
        tokenShare:
          description: An attribute that indicates whether Band-width Profile Envelopes
            containing more than one Bandwidth Profile Flow are supported by the Service
            Provider at the Subscriber UNI or Operator UNI. Reference MEF 10.4 Section
            9.11 Subscriber UNI Token Share Service Attribute or MEF 26.2 Section
            14.18 Operator UNI Token Share Service Attribute.
          $ref: '#/components/schemas/EnabledDisabled'
        l2cpAddressSet:
          description: L2CP Address Set Service Attribute is defined in MEF 45.1.
            Reference MEF 10.4 Section 9.16 Subscriber UNI L2CP Address Set Ser-vice
            Attribute and MEF 26.2 Section 14.20 Operator UNI L2CP Address Set Service
            Attribute.
          $ref: '#/components/schemas/L2cpAddressSet'
        envelopes:
          description: The Envelopes and Envelope Coupling Flag values to which Bandwidth
            Profile Flows can be mapped. Reference MEF 10.4 Section 9.12 Sub-scriber
            UNI Envelopes Service Attribute and MEF 26.2 Section 14.19 Operator UNI
            Envelopes Service Attribute.
          items:
            $ref: '#/components/schemas/Envelope'
          minItems: 0
          type: array
      type: object
    CarrierEthernetVirtualUni:
      allOf:
      - $ref: '#/components/schemas/MefServiceConfiguration'
      - description: This class represents the Virtual UNI Service Attributes that
          are agreed on by the SP/SO and the Operator for each UNI.
        properties:
          identifier:
            description: An identifier for the instance of the VUNI intended for operations
              purposes.
            maxLength: 45
            type: string
          ingressBandwidthProfile:
            description: A Bandwidth Profile Flow for all ingress Frames mapped to
              the VUNI. Reference MEF 26.2 Section 15.1.6 VUNI Ingress Bandwidth Profile
              Service Attribute.
            items:
              $ref: '#/components/schemas/BwpFlow'
            maxItems: 1
            minItems: 0
            type: array
          ovcEndPoint:
            description: Reference to CarrierEthernetOvcEndPoint.
            items:
              $ref: '#/components/schemas/CarrierEthernetOvcEndPointRef'
            minItems: 0
            type: array
          l2cpAddressSet:
            $ref: '#/components/schemas/L2cpAddressSet'
          maximumNumberOfEnniCeVlanIdsPerOvcEndPoint:
            description: The maximum number of ENNI CE-VLAN ID values that can be
              mapped to an OVC End Point that is in the VUNI.
            minimum: 0
            type: integer
          maximumNumberOfOvcEndPoints:
            description: The maximum number of OVC End Points that can be in the VUNI.
            minimum: 0
            type: integer
          egressBandwidthProfile:
            description: A Bandwidth Profile Flow for all egress Frames mapped to
              the VUNI.  Reference MEF 26.2 Section 15.1.7 VUNI Egress Bandwidth Profile
              Service Attribute.
            items:
              $ref: '#/components/schemas/BwpFlow'
            maxItems: 1
            minItems: 0
            type: array
          l2cpPeering:
            $ref: '#/components/schemas/L2cpPeering'
          defaultEnniCeVlanId:
            $ref: '#/components/schemas/VlanId'
          adminState:
            $ref: '#/components/schemas/AdminState'
          mepList:
            description: The indication of the instantiation of a MEP. A list with
              each item specifying the MEG Level. Reference MEF 26.2 Section 15.1.10
              VUNI Maintenance End Point List Service Attribute.
            items:
              $ref: '#/components/schemas/MepLevelAndDirection'
            minItems: 0
            type: array
          operationalState:
            $ref: '#/components/schemas/OperationalState'
          sVlanId:
            $ref: '#/components/schemas/VlanId'
      x-discriminator-value: urn:mef:lso:spec:legato:CarrierEthernetVirtualUni:v2.0.0:all
    CarrierEthernetVirtualUniRef:
      properties:
        href:
          format: uri
          type: string
        id:
          format: uuid
          type: string
      type: object
    ClassOfServiceEgressBandwidthProfile:
      description: "List of pairs of the form <x,y> where x is an Class of Service\
        \ Name contained in the EVC List of Class of Service Names and y is <CIR,\
        \ CIRmax, ER>.   Reference MEF 10.4 Section 10.11 EVC EP Class of Service\
        \ Name Egress Bandwidth Profile Service Attribute."
      properties:
        classOfServiceName:
          description: Class of Service Name.
          type: string
        egressBwpFlow:
          $ref: '#/components/schemas/EgressBwpFlow'
      type: object
    ColorFieldType:
      description: This enumeration is for selecting which frame field is being used
        for color indication. Reference MEF 10.4 Section 10.6 EVC EP Color Map Service
        Attribute and MEF 26.2 Section 16.7 OVC End Point Color Identifier Service
        Attribute.
      properties:
        value:
          $ref: '#/components/schemas/ColorFieldTypeValue'
      type: object
    ColorFieldTypeValue:
      enum:
      - PCP
      - DEI
      - END_POINT
      - DSCP
      type: string
    ColorIdentifier:
      description: "Represents the Color Identifier. The Color Identifier is a pair\
        \ of the form <F,M> where F is a field in the ingress EI Frame and M is a\
        \ mapping between each possible value of the field F and a Color.  The ColorIdentifier\
        \ object class is associated with CarrierEthernetServiceEndPoint (EvcEndPoint\
        \ or OvcEndPoint), in addition to the different field F, such as SepColorIdPac,\
        \ PcpColorIdPac, Dei-ColorIdPac and DscpColorIdPac. When the OVC End Point\
        \ is at an ENNI but not in a VUNI the value of F is either S-Tag DEI or S-Tag\
        \ PCP, and hence the DeiColorIdPac and PcpColorIdPac refer to the value of\
        \ the S-Tag DEI and PCP fields. When the OVC End Point is in a VUNI or at\
        \ a UNI, the value of F MUST be is one of OVC End Point, C-Tag DEI, PCP or\
        \ DSCP, and hence the DeiColorIdPac and PcpColorIdPac refer to the value of\
        \ the C-Tag DEI and PCP fields. Refer-ence MEF 10.4 Section 10.6 EVC EP Color\
        \ Map Service Attribute and MEF 26.2 Section 16.7 OVC End Point Color Identifier\
        \ Service Attribute."
      properties:
        colorFieldType:
          $ref: '#/components/schemas/ColorFieldType'
        deiColorPac:
          description: This attribute represents the relationship between the ColorIdentifier
            and the DeiColorIdPac (representing the choice that maps VLAN Tag DEI
            to Color).
          items:
            $ref: '#/components/schemas/DeiColorIdPac'
          maxItems: 1
          minItems: 0
          type: array
        pcpColorPac:
          description: This attribute represents the relationship between the ColorIdentifier
            and the PcpColorIdPac (representing the choice that maps VLAN tag PCPs
            to Color).
          items:
            $ref: '#/components/schemas/PcpColorIdPac'
          maxItems: 1
          minItems: 0
          type: array
        sepColorPac:
          description: This attribute represents the relationship between the ColorIdentifier
            and theh SepColorIdPac (representing the choice that maps EVC End Point
            or OVC End Point to Color).
          items:
            $ref: '#/components/schemas/SepColorIdPac'
          maxItems: 1
          minItems: 0
          type: array
        dscpColorPac:
          description: This attribute represents the relationship between the ColorIdentifier
            and theh DscpColorIdPac (representing the choice that maps DSCP values
            to Color).
          items:
            $ref: '#/components/schemas/DscpColorIdPac'
          maxItems: 2
          minItems: 0
          type: array
      type: object
    ColorMode:
      description: This enumeration indicates whether the Color Identifier of the
        Service Frame is considered by the Bandwidth Profile Algorithm.
      properties:
        value:
          $ref: '#/components/schemas/Value'
      type: object
    ConnectionType:
      description: "This is for EVC or OVC connection types, including point to point,\
        \ multi-point and rooted multi-point. Reference MEF 26.2 Section 12.2 OVC\
        \ Type Service Attribute and MEF 10.4 Section 8.3 EVC Type Service Attribute."
      enum:
      - POINT_TO_POINT
      - MULTIPOINT
      - ROOTED_MULTIPOINT
      type: string
    ConversationIdToAggregationLinkMap:
      description: This is a Port Conversation ID to Aggregation Link Map as defined
        in IEEE Std 802.1AX ï¿½ 2014. Reference MEF-Types.
      properties:
        conversationId:
          items:
            description: The conversation ID is a VLAN ID or 0 for untagged or priority
              tagged frames.
            type: integer
          minItems: 1
          type: array
        linkNumberIdList:
          description: The link number ID of the aggregation link.
          items:
            minimum: 1
            type: integer
          minItems: 1
          type: array
      type: object
    CosIdentifier:
      description: "The CosIdentifier represents the Class of Service Identifier.\
        \ Each ingress EI Frame mapped to the given EVC/OVC End Point has a single\
        \ Class of Service.  The Class of Service can be determined from inspection\
        \ of the content of the ingress EI Frame. It is associated with the SepCosIdPac,\
        \ or the PcpCosIdPac or the DscpCosIdPac (when the Class of Service Identifier\
        \ mapping type is Ser-vice End Point or PCP values or DSCP values respectively).\
        \ In the case of PCP, when an OVC End Point is at an ENNI but not in a VUNI,\
        \ the PcpCosIdPac refers to the value of the S-Tag PCP field.  When an OVC\
        \ End Point is at a UNI or in a VUNI, or for any EVC End Point, the Pcp-CosIdPac\
        \ refers to the value of the C-Tag PCP field.  EI Frames of L2CP protocols\
        \ may be identi-fied by a Class of Service Identifier, mapping to specified\
        \ CoS Name. Reference MEF 10.4 Sec-tion 10.5 EVC EP Ingress Class of Service\
        \ Map Service Attribute and MEF 26.2 Section 16.6 OVC End Point Class of Service\
        \ Identifier Service Attribute."
      properties:
        l2cpProtocolList:
          description: This attribute lists the L2CP protocols that map to the Class
            of Service name.
          items:
            $ref: '#/components/schemas/L2cpProtocol'
          minItems: 0
          type: array
        pcpCosIdPac:
          description: This attribute represents the relationship between the CosName
            and the PcpCosId-Pac when cosMappingType in CosMap is PCP and the cosName
            is not only for L2CP.
          items:
            $ref: '#/components/schemas/PcpCosIdPac'
          maxItems: 1
          minItems: 0
          type: array
        sepCosIdPac:
          description: This attribute represents the relationship between the CosName
            and the SepCosId-Pac when the cosMappingType in Cos-Map is END_POINT and
            the cosName is not only for L2CP.
          items:
            $ref: '#/components/schemas/SepCosIdPac'
          maxItems: 1
          minItems: 0
          type: array
        dscpCosIdPac:
          description: This attribute represents the relationship between the CosName
            and the Dscp-CosIdPac when the cosMappingType in CosMap is DSCP and the
            cosName is not only for L2CP.
          items:
            $ref: '#/components/schemas/DscpCosIdPac'
          maxItems: 2
          minItems: 0
          type: array
        cosName:
          description: This attribute denotes the Class of Service name that the CosIdentifier
            maps to.
          type: string
      type: object
    CosMap:
      description: "The CoS Map represents the mapping from fields in an Ingress EI\
        \ Frame to a CoS Name.  The map can be based on the EVC or OVC End Point,\
        \ the S-Tag or C-Tag PCP value, or the DSCP field if the EI Frame is carrying\
        \ an IP Packet.  Reference MEF 10.4 Section 10.5 EVC EP Ingress Class of Service\
        \ Map Service Attribute and MEF 26.2 Section 16.6 OVC End Point Class of Service\
        \ Identifier Service Attribute."
      properties:
        cosMapping:
          description: "This attribute is a list of mappings, one per CoS Name.  Each\
            \ entry identifies the Cos IDs that map to the specified CoS Name."
          items:
            $ref: '#/components/schemas/CosIdentifier'
          minItems: 1
          type: array
        cosMappingType:
          description: This attribute identifies which field is used for the CoS Mapping.
          $ref: '#/components/schemas/CosMappingType'
      type: object
    CosMappingType:
      description: This enumeration is for selecting which frame field is being used
        in the Class of Service Map. Ref-erence MEF 10.4 Section 10.5 EVC EP Ingress
        Class of Service Map Service Attribute and MEF 26.2 Section 16.6 OVC End Point
        Class of Service Identifier Service Attribute.
      properties:
        value:
          $ref: '#/components/schemas/CosMappingTypeValue'
      type: object
    CosMappingTypeValue:
      enum:
      - DSCP
      - END_POINT
      - PCP
      type: string
    CosNameAndColorToDeiPac:
      description: The CosNameAndColorToDeiPac represents the Egress Map that maps
        from CoS Name and In-gress Color to DEI. Reference MEF 26.2 Section 16.8.2
        OVC End Point Egress Map Service At-tribute Form CC->S-Tag DEI and Section
        16.8.5 OVC End Point Egress Map Form CC->C-Tag DEI.
      properties:
        ingressColor:
          $ref: '#/components/schemas/FrameColor'
        ingressCosName:
          type: string
        deiValue:
          $ref: '#/components/schemas/DeiOrDiscard'
      type: object
    CosNameAndColorToPcpPac:
      description: The CosNameAndColorToPcpPac represents the Egress Map that maps
        from CoS Name and In-gress Color to PCP. Reference MEF 26.2 Section 16.8.3
        OVC End Point Egress Map Service At-tribute Form CC->S-Tag PCP and 16.8.6
        OVC End Point Egress Map Form CC->C-Tag PCP.
      properties:
        pcpValue:
          $ref: '#/components/schemas/PcpOrDiscard'
        ingressColor:
          $ref: '#/components/schemas/FrameColor'
        ingressCosName:
          type: string
      type: object
    CosNameToPcpPac:
      description: The CosNameToPcpPac represents the Egress Map that maps from CoS
        Name to PCP. Reference MEF 26.2 Section 16.8.1 OVC End Point Egress Map Service
        Attribute Form CN->S-Tag PCP and Section 16.8.4 OVC End Point Egress Map Form
        CN->C-Tag PCP.
      properties:
        pcpValue:
          $ref: '#/components/schemas/PcpOrDiscard'
        ingressCosName:
          type: string
      type: object
    DeiColorIdPac:
      description: "This represents the Color Identifier that maps the VLAN Tag (S-Tag\
        \ or C-Tag) DEI value to Col-or, DEI=0 for Green color and DEI=1 for Yellow\
        \ color. For an EVC End Point or OVC End Point at UNI or in a VUNI, the DEI\
        \ value is from C-Tag Ingress EI frames. For an OVC End Point at an ENNI and\
        \ not in a VUNI, the DEI value is from S-Tag or the ingress EI frames. NOTE:\
        \ This is an object with no attributes. Reference MEF 26.2 Sections 16.7.1\
        \ OVC End Point Color Identifier Service Attribute with F=S-Tag DEI, 16.7.4.1\
        \ OVC End Point Color Identifier Service Attribute with F=C-Tag DEI and MEF\
        \ 10.4 Section 10.6.2 EVC EP Color Map Service Attribute with F=C-Tag DEI."
      type: object
    DeiOrDiscard:
      description: This enumeration lists the DEI value for color or discard and is
        used for Egress Map. 0 - Set egress frame DEI field to be 0 when the Egress
        Map determines based on CoS Name (and Ingress Color). 1 - Set egress frame
        DEI field to be 1 when the Egress Map determines based on CoS Name (and Ingress
        Color). DISCARD - Discard the egress frame when the Egress Map determines
        based on CoS Name (and Ingress Color).
      properties:
        value:
          $ref: '#/components/schemas/DeiOrDiscardValue'
      type: object
    DeiOrDiscardValue:
      enum:
      - DISCARD
      - "0"
      - "1"
      type: string
    DscpColorIdPac:
      description: This represents the Color Identifier that maps DSCP (IPv4 or IPv6)
        values to Color. Reference MEF 26.2 Section 16.7.6 OVC End Point Color Identifier
        Service Attribute with F=DSCP and MEF 10.4 Section 10.6.4 EVC EP Color Map
        Service Attribute with F=DSCP.
      properties:
        ipVersion:
          description: "This attribute denotes which IP version is used. It can be\
            \ IPV4, IPV6 or IPV4 and IPV6."
          $ref: '#/components/schemas/IpVersion'
        dscpValueForGreenList:
          items:
            type: integer
          maxItems: 63
          minItems: 0
          type: array
        dscpValueForYellowList:
          items:
            type: integer
          maxItems: 63
          minItems: 0
          type: array
      type: object
    DscpCosIdPac:
      description: "Represents the object class represents CoS Identifier that maps\
        \ the IP DSCP values to the Class of Service Name(s).  It can map a list of\
        \ DSCP values to two different Class of Service Names, one for ingress EI\
        \ Frames carrying an IPv4 packet and a different one for ingress EI Frames\
        \ carrying and IPv6 packet. It also can map a list of DSCP values (both IPv4\
        \ and IPv6) to one Class of Ser-vice Name. Reference MEF 10.4 Section 10.5.1.3\
        \ EVC EP Ingress Class of Service Map Service Attribute Based on Internet\
        \ Protocol and MEF 26.2 Section 16.6.2.1.3 OVC End Point Class of Service\
        \ Identifier Service Attribute for Ingress Data EI Frames Based on Internet\
        \ Protocol."
      properties:
        ipVersion:
          description: "This attribute denotes which IP version is used. It can be\
            \ IPV4, IPV6 or IPV4 and IPV6."
          $ref: '#/components/schemas/IpVersion'
        dscpValueList:
          description: "This attribute is a list of DSCP values that maps to a CoS\
            \ Name.  If NO_IP_PACKET is included here, the ipVersion must be IPV4_AND_IPV6."
          items:
            $ref: '#/components/schemas/DscpValue'
          minItems: 1
          type: array
      type: object
    DscpEecIdPac:
      description: "This represents the IP DSCP values that map to a given Egress\
        \ Equivalence Class Name (specified in EecIdentifier), for either EI Frames\
        \ carrying IPv4 Packets, IPv6 Packets, or both.  Reference MEF 26.2 Section\
        \ 16.9.2.1.2 OVC End Point Egress Equivalence Class Identifier Service Attrib-ute\
        \ for Egress Data EI Frames Based on Internet Protocol."
      properties:
        ipVersion:
          description: "This attribute denotes which IP version is used. It can be\
            \ IPV4, IPV6 or IPV4 and IPV6."
          $ref: '#/components/schemas/IpVersion'
        dscpValueList:
          description: "This attribute is a list of DSCP values that maps to the EEC\
            \ Name.  If NO_IP_PACKET is included here, the ipVersion must be IPV4_AND-IPV6."
          items:
            $ref: '#/components/schemas/DscpValue'
          minItems: 1
          type: array
      type: object
    DscpValue:
      description: Enumeration used to indicate the set of DSCP values as well as
        groups of values such as list such as NO_IP_PACKET and ALL_VALUES.
      enum:
      - NO_IP_PACKET
      - ALL_VALUES
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"
      - "10"
      - "11"
      - "12"
      - "13"
      - "14"
      - "15"
      - "16"
      - "17"
      - "18"
      - "19"
      - "20"
      - "21"
      - "22"
      - "23"
      - "24"
      - "25"
      - "26"
      - "27"
      - "28"
      - "29"
      - "30"
      - "31"
      - "32"
      - "33"
      - "34"
      - "35"
      - "36"
      - "37"
      - "38"
      - "39"
      - "40"
      - "41"
      - "42"
      - "43"
      - "44"
      - "45"
      - "46"
      - "47"
      - "48"
      - "49"
      - "50"
      - "51"
      - "52"
      - "53"
      - "54"
      - "55"
      - "56"
      - "57"
      - "58"
      - "59"
      - "60"
      - "61"
      - "62"
      - "63"
      type: string
    EecIdentifier:
      description: "The EecIdentifier represents the Egress Equivalence Class Identifier.\
        \ Each egress EI Frame mapped to the given OVC End Point has a single Egress\
        \ Equivalence Class. The Egress Equivalence Class can be determined from inspection\
        \ of the content of the egress EI Frame. It is associated with the PcpEecIdPac,\
        \ or the DscpEecIdPac representing mapping to S-Tag PCP, C-Tag PCP or DSCP\
        \ respectively). EI Frames of L2CP protocols may be identified by an Egress\
        \ Equivalence Class Identifier, mapping to specific Egress Equivalence Class\
        \ Name. It is possible to have only a single Egress Equivalence Class Name.\
        \ For an OVC End Point at an ENNI that is not in a VUNI, pcpEecIdPac refers\
        \ to the value of the S-Tag PCP field. For an OVC End Point at a UNI or in\
        \ a VUNI, pcpEecIdPac refers to the value of the C-Tag PCP field. Reference\
        \ MEF 26.2 Section 16.9 OVC End Point Egress Equivalence Class Identifier\
        \ Service Attribute."
      properties:
        dscpEecIdPac:
          description: This attribute represents the relationship between the EecIdentifier
            and a DscpEecIdPac if the eecMappingType in EecMap is DSCP and the eecName
            is not only for L2CP.
          items:
            $ref: '#/components/schemas/DscpEecIdPac'
          maxItems: 2
          minItems: 0
          type: array
        l2cpProtocolList:
          description: This attribute lists the L2CP protocols that map to the Egress
            Equivalence Class Name.
          items:
            $ref: '#/components/schemas/L2cpProtocol'
          minItems: 0
          type: array
        eecName:
          description: This attribute denotes the Egress Equiva-lence Class Name that
            the EecIdentifier maps to.
          type: string
        pcpEecIdPac:
          description: This attribute represents the relationship between the EecIdentifier
            and a PcpEecIdPac if the eecMappingType in EecMap is PCP and the eecName
            is not only for L2CP.
          items:
            $ref: '#/components/schemas/PcpEecIdPac'
          maxItems: 1
          minItems: 0
          type: array
      type: object
    EecMap:
      description: "The Egress Equivalence Class Map represents the mapping from fields\
        \ in an Egress EI Frame to an Egress Equivalence Class Name.  The map can\
        \ be based on the S-Tag or C-Tag PCP value, or the DSCP field if the EI Frame\
        \ is carrying an IP Packet.  Reference MEF 26.2 Section 16.9 OVC End Point\
        \ Egress Equivalence Class Identifier Service Attribute."
      properties:
        eecMappingType:
          description: This attribute identifies which field is used for the EEC Mapping.
          $ref: '#/components/schemas/EecMappingType'
        eecMapping:
          description: "This attribute is a list of mappings, one per EEC Name.  Each\
            \ entry identifies the EEC IDs that map to the specified EEC Name."
          items:
            $ref: '#/components/schemas/EecIdentifier'
          minItems: 1
          type: array
      type: object
    EecMappingType:
      description: This enumeration is for selecting which frame field being used
        in the Egress Equivalence Class Map. Reference MEF 26.2 Section 16.9 OVC End
        Point Egress Equivalence Class Identifier Service Attribute.
      properties:
        value:
          $ref: '#/components/schemas/EecMappingTypeValue'
      type: object
    EecMappingTypeValue:
      enum:
      - DSCP
      - PCP
      type: string
    EgressBwpFlow:
      description: "Bandwidth Profile for egress interfaces that support the tuple\
        \ set of cir, cirMax, rank and envelope."
      properties:
        envelope:
          description: "Identifies the Envelope that the Bandwidth Profile Flow belongs\
            \ to, and the rank within the Envelope."
          $ref: '#/components/schemas/Envelope'
        cirMax:
          description: Attribute represents Maximum Committed Information Rate. Limits
            the average rate in bits per second at which Service Frames for this Bandwidth
            Profile Flow can be declared Green (regardless of unused committed bandwidth*
            from higher-ranked Bandwidth Profile Flows).
          minimum: 0
          type: integer
        rank:
          description: This attribute denotes the rank of the bandwidth profile flow
            in the envelope.
          minimum: 0
          type: integer
        cir:
          description: "Attribute represents Committed Information Rate. When added\
            \ to unused committed bandwidth provided from higher-ranked Bandwidth\
            \ Profile Flows (depending on the value of CF for the higher-ranked Bandwidth\
            \ Profile Flows), limits the average rate in bits per second at which\
            \ Service Frames for this Bandwidth Profile Flow can be declared Green."
          minimum: 0
          type: integer
      type: object
    Elmi:
      enum:
      - ENABLED
      - DISABLED
      type: string
    EnabledDisabled:
      description: Enumeration used to indicate state as ENABLED or DISABLED.
      enum:
      - ENABLED
      - DISABLED
      type: string
    Envelope:
      description: This represents the UNI or ENNI Envelopes service attribute.  Each
        Envelope consists of an Enve-lope ID and Envelope Coupling Flag. Defined in
        MEF-Common. Reference MEF 10.4 Section 12.1.1 Envelope Parameters and MEF
        26.2 Section 17.1.1 Envelope Parameters.
      properties:
        couplingFlagForIndexZero:
          description: This attribute denotes the coupling flag for index zero. FALSE
            for 0 (overflow Green tokens are discarded) and TRUE for 1 (overflow Green
            tokens can be used as Yellow tokens).
          type: boolean
        envelopeId:
          description: The attribute is a string that identifies the Envelope.
          maxLength: 45
          type: string
      type: object
    Error:
      description: "Used when an API throws an Error, typically with a HTTP error\
        \     response-code (3xx, 4xx, 5xx)"
      properties:
        reason:
          description: |-
            Text that explains the reason for error. This can be shown to a
            client user.
          type: string
        code:
          description: |-
            Application related code.
            List of supported error codes are defined below:

            **400: Bad Request**
            - 20: Invalid URL parameter value
            - 21: Missing body
            - 22: Invalid body
            - 23: Missing body field
            - 24: Invalid body field
            - 25: Missing header
            - 26: Invalid header value
            - 27: Missing query-string parameter
            - 28: Invalid query-string parameter value

            **401: Unauthorized**
            - 40: Missing credentials
            - 41: Invalid credentials
            - 42: Expired credentials

            **403: Forbidden**
            - 50: Access denied
            - 51: Forbidden requester
            - 52: Forbidden user
            - 53: Too many requests

            **404: Not Found**
            - 60: Resource not found

            **405: Method Not Allowed**
            - 61: Method not allowed

            **408: Request Timeout**
            - 63: Request time-out

            **409: Conflict**
            - 64: Resource Conflict

            **422: Unprocessable Entity**
            - Functional Error codes specific to operation

            **500: Internal Server Error**
            - 1: Internal Error

            **501: Not Implemented**

            **503: Service Unavailable**
          format: int32
          type: integer
        message:
          description: |-
            Text that provides more details and corrective actions related to
            the error. This can be shown to a client user.
          items:
            type: string
          maxItems: 1
          minItems: 0
          type: array
        referenceError:
          description: URI pointing to (external) documentation describing the error.
          items:
            type: string
          maxItems: 1
          minItems: 0
          type: array
        status:
          description: HTTP error code extension like 400-2.
          items:
            type: string
          maxItems: 1
          minItems: 0
          type: array
      required:
      - code
      - reason
      type: object
    EthernetFrameFormat:
      description: This is a single value read only attribute. Reference MEF 10.4
        Section 9.7 Subscriber UNI Service Frame Format Service Attribute and MEF
        26.2 Section 14.7 Operator UNI Service Frame Format Service Attribute.
      properties:
        type:
          enum:
          - ETHERNET
          type: string
      type: object
    EvcEndPointRole:
      description: String enumeration representing OVC End Point Role. Reference MEF
        10.4 Section 10.3 EVC End Point Role Service Attribute.
      enum:
      - ROOT
      - LEAF
      type: string
    EvcEpEgressMap:
      description: Represents an entry in the Egress Map that maps the Cos Name and
        Color assigned to an ingress Service Frame to the PCP and DEI values to set
        in the C-Tag of an egress Service Frame.  It is as-sociated with EVC End Point.
        Reference MEF 10.4 Section 10.7 EVC End Point Egress Map Service Attribute.
      properties:
        color:
          description: The Color assigned to the Service Frame at the ingress UNI.
          $ref: '#/components/schemas/FrameColor'
        dei:
          description: The DEI value to set in the C-tag of the egress Service Frame.
          $ref: '#/components/schemas/DeiOrDiscard'
        pcp:
          description: The PCP value to set in the C-tag of the egress Service Frame.
          $ref: '#/components/schemas/PcpOrDiscard'
        cosName:
          description: The CoS Name assigned to the Service Frame at the ingress UNI.
          type: string
      type: object
    EventSubscription:
      allOf:
      - $ref: '#/components/schemas/EventSubscriptionInput'
      - properties:
          id:
            description: Unique identifier of Hub
            type: string
        required:
        - id
        type: object
      description: Resource used to manage notification subscription.
    EventSubscriptionInput:
      description: The information needed to create a Hub.
      properties:
        query:
          description: |-
            The query must have an eventType= information.
            Optionally a ? could be added to reduce hub.
            queryï¿½:ï¿½eventType = ServiceOrderStateChangeNotificationï¿½&serviceOrder.state=COMPLETED
          type: string
        callback:
          description: URL where notification must be send
          type: string
      required:
      - callback
      - query
      type: object
    Extensible:
      description: "Base schema for all API schema objects that support polymorphic\
        \ \nextensions of its defined schema."
      properties:
        '@baseType':
          description: "When sub-classing, this defines the super/base class type\
            \ (if \napplicable) of the API schema object."
          type: string
        '@type':
          description: The concrete (non-abstract) class type of the API schema object.
          type: string
        '@schemaLocation':
          description: A URI refernce to the schema file that defines the attributes
            and relationships of the API schema object.
          format: uri
          type: string
      required:
      - '@type'
      type: object
    FrameColor:
      description: Frame color is either Green or Yellow. Reference MEF-Types.
      enum:
      - GREEN
      - YELLOW
      type: string
    FrameDelivery:
      description: "When the value is conditionally, the specific condition must be\
        \ addressed by the users.  What con-ditions should be supported are not in\
        \ the scope. Reference MEF 10.4 Section 8.4 EVC Data Ser-vice Frame Disposition\
        \ Service Attribute and MEF 26.2 Section 12.14.1 OVC Frame Disposition."
      enum:
      - DISCARD
      - CONDITIONALLY
      - UNCONDITIONALLY
      type: string
    FrameDisposition:
      properties:
        broadbast:
          $ref: '#/components/schemas/FrameDelivery'
        unicast:
          $ref: '#/components/schemas/FrameDelivery'
        multicast:
          $ref: '#/components/schemas/FrameDelivery'
      type: object
    Instantiation:
      description: The value is either Physical or Virtual. Reference MEF 10.4 Section
        9.2 Subscriber UNI Instantiation Service Attribute.
      enum:
      - PHYSICAL
      - VIRTUAL
      type: string
    IpVersion:
      description: "This enumeration lists the IP versions, including IPv4, IPv6 and\
        \ both."
      enum:
      - IPV4
      - IPV6
      - IPV4_AND_IPV6
      type: string
    L2cpAddressSet:
      description: Enumeration listing the L2CP Address Set. Reference MEF 45.1 Section
        8.1 L2CP Address Set Service Attribute.
      properties:
        bridgedAddresses:
          description: CTA - CEVLAN Tag Aware for VLAN-based services where the CE-VLAN
            ID is used to map a frame to a service. CTB - CVLAN Tag Blind for Port-based
            services where the CE-VLAN ID not used to map a frame to a service. CTB2
            -  CVLAN Tag Blind Option 2 for point-to-point Port-based services that
            support the EPL Option 2 L2CP processing.
          $ref: '#/components/schemas/BridgedAddresses'
      type: object
    L2cpPeering:
      description: This is a list that specifies the L2CP Protocol Identifier and
        the Destination Address in use by the protocol entity. Reference MEF 45.1
        Section 8.2 L2CP Peering Service Attribute.
      properties:
        protocolId:
          description: Protocol ID for which frames will be peered.
          $ref: '#/components/schemas/L2cpProtocol'
        destinationAddress:
          description: Destination address for which frames will be peered.
          type: string
        linkIdList:
          description: Identifiers for the links on which the specified protocol will
            be peered.  If no links are specified the protocol is peered on all links.
          items:
            type: string
          type: array
      type: object
    L2cpProtocol:
      description: Defines a L2CP protocol (LLC address type or EtherType) with possible
        subtype. Reference MEF 45.1 Section 8.2 L2CP Peering Service Attribute.
      properties:
        l2cpProtocolType:
          $ref: '#/components/schemas/L2cpProtocolType'
        subType:
          items:
            type: integer
          maxItems: 1
          minItems: 0
          type: array
        llcAddressOrEtherType:
          minimum: 0
          type: integer
      type: object
    L2cpProtocolType:
      description: "This lists the L2CP protocol types, either EtherType or LLC address.\
        \ Reference MEF 45.1 Section 8.2 L2CP Peering Service Attribute."
      properties:
        vlanType:
          $ref: '#/components/schemas/VlanType'
      type: object
    LinkAggregation:
      description: "Data type representing Link Aggregation types as used in MEF 10.4\
        \ and MEF 26.2. NONE-No Link Aggregation is used. 2_LINK_ACTIVE_STANDBY-The\
        \ SP network uses Link Aggregation as in either Clause 5.6.1 of IEEE Std 802.1AX-2008\
        \ [2] or Clause 6.7.1 of IEEE Std 802.1AX-2014 with one Link Aggregation Group\
        \ (LAG) across the links supporting the UNI/ENNI such that all Service Frames\
        \ are carried on only one of the two linkswhen both links are operational.\
        \ ALL_ACTIVE-The SP Network uses Link Aggregation as specified in Clause 5.3\
        \ of IEEE Std 802.1AX-2014, including the use of the version 2 LACPDUs as\
        \ specified in Clause 5.3.1h of IEEE Std 802.1AZ-2014, with one Link Aggregation\
        \ Group (LAG) across the links. OTHER-The Operator/Subscriber/Service Provider\
        \ agree on another other resiliency mechanism."
      enum:
      - NONE
      - 2_LINK_ACTIVE_STANDBY
      - ALL_ACTIVE
      - OTHER
      type: string
    MaintenanceIntermediatePoint:
      enum:
      - ENABLED
      - DISABLED
      type: string
    MefServiceConfiguration:
      allOf:
      - $ref: '#/components/schemas/Extensible'
      description: Describes the characteristic of an MEF Service schema object.
      discriminator:
        mapping:
          urn:mef:lso:spec:legato:CarrierEthernetOperatorUni:v2.0.0:all: '#/components/schemas/CarrierEthernetOperatorUni'
          urn:mef:lso:spec:legato:CarrierEthernetSls:v2.0.0:all: '#/components/schemas/CarrierEthernetSls'
          urn:mef:lso:spec:legato:CarrierEthernetEnni:v2.0.0:all: '#/components/schemas/CarrierEthernetEnni'
          urn:mef:lso:spec:legato:CarrierEthernetSubscriberUni:v2.0.0:all: '#/components/schemas/CarrierEthernetSubscriberUni'
          urn:mef:lso:spec:legato:CarrierEthernetEvc:v2.0.0:all: '#/components/schemas/CarrierEthernetEvc'
          urn:mef:lso:spec:legato:CarrierEthernetVirtualUni:v2.0.0:all: '#/components/schemas/CarrierEthernetVirtualUni'
          urn:mef:lso:spec:legato:CarrierEthernetOvc:v2.0.0:all: '#/components/schemas/CarrierEthernetOvc'
        propertyName: '@type'
      properties:
        '@type':
          description: Used as a discriminator to support polymorphic definitions
          type: string
    MegLevel:
      description: This is an integer 0-7 or None. NONE indicates that SOAM EI Frames
        are not guaranteed to pass over at any MEG Level. Reference MEF-Types & MEF
        10.4 Section 10.13 EVC EP Subscriber MEG MIP Service Attribute.
      enum:
      - NONE
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      type: string
    MepDirection:
      description: "This is for MEP direction, either Down MEP or Up MEP. Reference\
        \ MEF-Types."
      enum:
      - DOWN
      - UP
      type: string
    MepLevelAndDirection:
      description: This datatype defines the MEG Level and MEP direction. Reference
        MEF 26.2 Section 16.17 OVC End Point Maintenance End Point List Service Attribute.
      properties:
        level:
          maximum: 7
          minimum: 0
          type: integer
        mepDirection:
          $ref: '#/components/schemas/MepDirection'
      type: object
    Note:
      allOf:
      - $ref: '#/components/schemas/Extensible'
      - properties:
          date:
            description: Date of the note
            format: date-time
            type: string
          system:
            description: Describes the system from which the action related to this
              note was done
            type: string
          author:
            description: Author of the note
            type: string
          text:
            description: Text of the note
            type: string
        type: object
      description: Extra information about a given entity.
    OneWayAvailabilityPmMetric:
      description: Data type representing One-way Availability Performance Metric.      Reference
        MEF 10.4 Section 8.8.7 One-way Availability Performance Metric and MEF 26.2
        Section 12.13.7 One-way Availability Performance Metric.
      properties:
        oneWayAvailabilityObjective:
          $ref: '#/components/schemas/Percentage'
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OneWayCompositePmMetric:
      description: Data type representing One-way Composite Performance Metric. Reference
        MEF 10.4 Section 8.8.10 One-way Composite Performance Metric.
      properties:
        oneWayIfdvThreshold:
          $ref: '#/components/schemas/Time'
        cpmObjective:
          $ref: '#/components/schemas/Percentage'
        compositeFrameDelay:
          description: Composite indicator for One-way Frame Delay equal to 0 or 1.
          maximum: 1
          minimum: 0
          type: integer
        compositeFrameDelayVariation:
          description: Composite indicator for One-way Frame Delay Variation equal
            to 0 or 1.
          type: integer
        oneWayFdThreshold:
          $ref: '#/components/schemas/Time'
        compositeFrameLoss:
          description: Composite indicator for One-way Frame Loss equal to 0 or 1.
          maximum: 1
          minimum: 0
          type: integer
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
        compositePerformanceIndicatorThreshold:
          description: Composite Performance Indicator threshold which if exceeded
            suggests an unacceptable time interval.
          type: number
      type: object
    OneWayConsecutiveHighLossIntervalsPmMetric:
      description: Data type representing One-way Consecutive High Loss Intervals      Performance
        Metric. Reference MEF 10.4 Section 8.8.9 One-way Consecutive High Loss Intervals
        Performance Metric and MEF 26.2 Section 12.13.9 One-way Consecutive High Loss
        Intervals Performance Metric.
      properties:
        consecutiveNumberP:
          description: The number of high loss intervals that constitute a consecutive
            high loss interval.
          type: integer
        oneWayChliObjective:
          description: Performance Objective expressed as a non-negative integer.
          type: integer
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OneWayFrameDelayPmMetric:
      description: Data type representing One-way Frame Delay Performance Metric.
        Reference MEF 10.4 Section 8.8.2 One-way Frame Delay Performance Metric and
        MEF 26.2 Section 12.13.2 One-way Frame Delay Performance Metric.
      properties:
        oneWayFdObjective:
          $ref: '#/components/schemas/Time'
        oneWayFdPercentile:
          $ref: '#/components/schemas/Percentage'
        orderedPairList:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OneWayFrameLossRatioPmMetric:
      description: Data type representing One-way Frame Loss Ratio Performance Metric.      Reference
        MEF 10.4 Section 8.8.6 One-way Frame Loss Ratio Performance Metric and MEF
        26.2 Section 12.13.6 One-way Frame Loss Performance Metric.
      properties:
        oneWayFrameLossRatioObjective:
          $ref: '#/components/schemas/Percentage'
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OneWayGroupAvailabilityPmMetric:
      description: Data type representing One-way Group Availability Performance Metric.Reference
        MEF 10.4 Section 8.8.11 One-way Group Availability Performance Metric and
        MEF 26.2 Section 12.13.10 One-way Group Availability Performance Metric.
      properties:
        minimumNumberOfSetsAvailableK:
          description: Specified number of sets of ordered EVC End Point Pair available
            during characterized percentage of time of measurement.
          minimum: 1
          type: integer
        oneWayGroupAvailabilityObjective:
          $ref: '#/components/schemas/Percentage'
        setOfOrderedPairs:
          items:
            $ref: '#/components/schemas/SetOfOrderedPairs'
          minItems: 1
          type: array
      type: object
    OneWayHighLossIntervalPmMetric:
      description: Data type representing One-way Consecutive High Loss Intervals      Performance
        Metric. Reference MEF 10.4 Section 8.8.9 One-way Consecutive High Loss Intervals
        Performance Metric and MEF 26.2 Section 12.13.9 One-way Consecutive High Loss
        Intervals Performance Metric.
      properties:
        oneWayHighLossIntervalsObjective:
          description: Performance Objective expressed as a non-negative integer.
          type: integer
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OneWayInterFrameDelayVariationPmMetric:
      description: Data type representing One-way Inter-Frame Delay Performance Metric.      Reference
        MEF 10.4 Section 8.8.5 One-way InterFrame Delay Performance Metric and MEF
        26.2 Section 12.13.5 One-way Inter-Frame Delay Performance Metric.
      properties:
        oneWayIfdvPercentile:
          $ref: '#/components/schemas/Percentage'
        oneWayIfdvObjective:
          $ref: '#/components/schemas/Time'
        timeDuration:
          $ref: '#/components/schemas/Time'
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OneWayMeanFrameDelayPmMetric:
      description: Data type representing One-way Mean Frame Delay Performance Metric.      Reference
        MEF 10.4 Section 8.8.3 One-way Mean Frame Delay Performance Metric and MEF
        26.2 Section 12.13.3 One-way Mean Frame Delay Performance Metric.
      properties:
        oneWayMfdObjective:
          $ref: '#/components/schemas/Time'
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OneWayMeanFrameDelayRangePmMetric:
      description: Data type representing One-way Frame Delay Range Performance Metric.
        Reference MEF 10.4 Section 8.8.4 One-way Frame Delay Range Performance Metric
        and MEF 26.2 Section 12.13.4 One-way Frame Delay Range Performance Metric.
      properties:
        oneWayFdrPercentile:
          $ref: '#/components/schemas/Percentage'
        oneWayFdrObjective:
          $ref: '#/components/schemas/Time'
        orderedPairs:
          description: A non-empty subset of the ordered pairs of OVC/EVC End Points.
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    OperationalState:
      description: This enumeration is for Operational states. Refer to ITU-T X.731.
        Reference MEF-Types.
      properties:
        state:
          $ref: '#/components/schemas/OperationalStateState'
      type: object
    OperationalStateState:
      enum:
      - ENABLED
      - DISABLED
      type: string
    OrderItemRelationshipType:
      description: Relationship type.
      enum:
      - reliesOn
      - dependency
      - crossRef
      type: string
    OrderRelationshipType:
      description: Relationship type.
      enum:
      - reliesOn
      - dependency
      - crossRef
      type: string
    OrderedPair:
      description: The OrderedPair data type is an ordered pair of EVC/OVC End Points
        for a specific performance metric for one way direction. It is associated
        with one way performance metrics and a pair of CarrierEthernetServiceEndPoints.
      properties:
        toUni:
          description: "NOTE: Need to point to schema reference."
          type: string
        fromUni:
          description: "NOTE: Need to point to schema reference."
          type: string
      type: object
    OvcCeVlanDeiPreservation:
      enum:
      - ENABLED
      - DISABLED
      type: string
    OvcCeVlanPcpPreservation:
      enum:
      - ENABLED
      - DISABLED
      type: string
    OvcEgressMapType:
      description: "This lists the Egress Map types, either CoS Name to PCP, or CoS\
        \ Name and Ingress Color to PCP, or CoS Name and Ingress Color to DEI for\
        \ S-Tag or C-Tag. Reference MEF 26.2 Section 16.8 OVC End Point Egress Map\
        \ Service Attribute."
      properties:
        type:
          $ref: '#/components/schemas/Type'
      type: object
    OvcEndPointMap:
      description: The information that determines which EI Frames are mapped to the
        OVC End Point. Reference MEF 26.2 Section 16.5 OVC End Point Map Service Attribute.
      properties:
        ovcEndPointMapFormT:
          items:
            $ref: '#/components/schemas/OvcEndPointMapFormT'
          maxItems: 1
          minItems: 0
          type: array
        ovcEndPointMapFormV:
          items:
            $ref: '#/components/schemas/OvcEndPointMapFormV'
          maxItems: 1
          minItems: 0
          type: array
        ovcEndPointMapFormU:
          items:
            $ref: '#/components/schemas/OvcEndPointMapFormU'
          maxItems: 1
          minItems: 0
          type: array
        ovcEndPointMapFormE:
          items:
            $ref: '#/components/schemas/OvcEndPointMapFormE'
          maxItems: 1
          minItems: 0
          type: array
        ovcEndPointMapForm:
          $ref: '#/components/schemas/OvcEndPointMapForm'
      type: object
    OvcEndPointMapForm:
      enum:
      - FORM_E
      - FORM_V
      - FORM_U
      - FORM_T
      type: string
    OvcEndPointMapFormE:
      description: The OvcEndPointMapFormE object class represents the OVC End Point
        Map Form E (E for ENNI) that consists of a list of one or more S-VLAN ID values.
        An S-Tagged ENNI Frame whose S-VLAN ID value matches an entry in the list
        maps to the OVC End Point.
      properties:
        sVlanIdList:
          $ref: '#/components/schemas/VlanIdListing'
      type: object
    OvcEndPointMapFormT:
      description: "The OvcEndPointMapFormT object class represents the OVC End Point\
        \ Map Form T (T for Trunk) that consists of a pair of S-VLAN ID values, <r,l>.\
        \ r is called the Root S-VLAN ID value and l is called the Leaf S-VLAN ID\
        \ value. An S-Tagged ENNI Frame whose S-VLAN ID value matches one of the two\
        \ S-VLAN ID values in the OVC End Point Map Form T maps to the OVC End Point."
      properties:
        leafSVlan:
          $ref: '#/components/schemas/VlanId'
        rootSVlan:
          $ref: '#/components/schemas/VlanId'
      type: object
    OvcEndPointMapFormU:
      description: The OvcEndPointMapFormU object class represents the OVC End Point
        Map Form U (U for UNI). It is a list of one or more CE-VLAN ID values. A Service
        Frame is mapped to the OVC End Point if the CE-VLAN ID value of the Service
        Frame is in the list.
      properties:
        ceVlanIdList:
          $ref: '#/components/schemas/VlanIdListing'
      type: object
    OvcEndPointMapFormV:
      description: "The OvcEndPointMapFormV object class represents the OVC End Point\
        \ Map Form V (V for VUNI) that lists one or more ENNI CE-VLAN ID values. An\
        \ S-Tagged ENNI Frame whose S-VLAN ID value matches the S-VLAN ID value specified\
        \ in VUNI and whose ENNI CE-VLAN ID value matches one of the ENNI CE-VLAN\
        \ ID values in the map, maps to the OVC End Point."
      properties:
        enniCeVlanIdList:
          $ref: '#/components/schemas/VlanIdListing'
        sVlan:
          $ref: '#/components/schemas/VlanId'
      type: object
    OvcEndPointRole:
      description: String enumeration representing OVC End Point Role. Reference MEF
        26.2 Section 16.4 OVC End Point Role Service Attribute.
      enum:
      - ROOT
      - LEAF
      - TRUNK
      type: string
    OvcEpEgressMap:
      description: "This lists the Egress Map types, either CoS Name to PCP, or CoS\
        \ Name and Ingress Color to PCP, or CoS Name and Ingress Color to DEI for\
        \ S-Tag or C-Tag. Reference MEF 26.2 Section 16.8 OVC End Point Egress Map\
        \ Service Attribute."
      properties:
        cosNameAndColorToPcpPacList:
          description: This attribute represents the relation between the EgressMap
            and the CosNameAndColorToPcpPac (representing the attribute using the
            CoS Name and ingress color to egress PCP mapping).
          items:
            $ref: '#/components/schemas/CosNameAndColorToPcpPac'
          minItems: 0
          type: array
        egressMapType:
          description: "This attribute determines which form to take to apply frame\
            \ color indication, among CoS name and Ingress Color to C-Tag PCP, or\
            \ CoS name and Ingress Color to S-Tag PCP, or CoS Name and Ingress Color\
            \ to C-Tag DEI, or CoS Name to C-Tag PCP or CoS Name to S-Tag PCP."
          $ref: '#/components/schemas/OvcEgressMapType'
        cosNameAndColorToDeiPacList:
          description: This attribute represents the relationship between the EgressMap
            and the CosNameAndColorToDeiPac (representing the attribute set for using
            CoS Name and ingress color to egress DEI mapping).
          items:
            $ref: '#/components/schemas/CosNameAndColorToDeiPac'
          minItems: 0
          type: array
        cosNameToPcpPacList:
          description: This attribute represents the Egress Map that maps from CoS
            name to PCP.
          items:
            $ref: '#/components/schemas/CosNameToPcpPac'
          minItems: 0
          type: array
      type: object
    OvcSvlanDeiPreservation:
      enum:
      - ENABLED
      - DISABLED
      type: string
    OvcSvlanPcpPreservation:
      enum:
      - ENABLED
      - DISABLED
      type: string
    PcpColorIdPac:
      description: "Represents Color Identifier that maps VLAN Tag (S-Tag or C-Tag)\
        \ PCP values to Color. For an EVC End Point or OVC End Point at UNI or in\
        \ a VUNI, the PCP values are from C-Tag ingress EI frames.  For an OVC End\
        \ Point at an ENNI and not in a VUNI, the PCP values are from S-Tag of the\
        \ ingress EI frames. Reference MEF 26.2 Section 16.7 OVC End Point Color Identifier\
        \ and MEF 10.4 Section 10.6 EVC EP Color Map Service Attribute."
      properties:
        pcpValueForGreenList:
          description: This attribute provides a list PCP values map to green ingress
            EI frames.  The pcpValueForGreenList and the pcpValueForYellowList must
            disjoint and the union of the two lists must include all possible PCP
            values.
          items:
            type: integer
          maxItems: 8
          minItems: 0
          type: array
        pcpValueForYellowList:
          description: This attribute provides a list PCP values map to yellow ingress
            EI frames.  The pcpValueForGreenList and the pcpValueForYellowList must
            disjoint and the union of the two lists must include all possible PCP
            values.
          items:
            type: integer
          maxItems: 8
          minItems: 0
          type: array
      type: object
    PcpCosIdPac:
      description: "The PcpCosIdPac object class represents the PCP values that map\
        \ to a given Class of Service Name (specifed in CosIdentifier).  For an EVC\
        \ End Point, or an OVC End Point at UNI or in a VUNI, the PCP values are from\
        \ the C-Tag in the ingress EI frames.  For an OVC End Point at an ENNI and\
        \ not in a VUNI, the PCP values are from the S-Tag in the ingress EI frames.\
        \ Reference MEF 10.4 Section 10.5.1.2 EVC EP Ingress Class of Service Map\
        \ Service Attribute Based on Priority Code Point Field and MEF 26.2 Section\
        \ 16.6.2.1.2 OVC End Point Class of Service Iden-tifier Service Attribute\
        \ for Ingress Data EI Frames Based on C-Tag Priority Code Point."
      properties:
        pcpValueList:
          description: This attribute is a list of PCP values that map to the CoS
            Name.
          items:
            $ref: '#/components/schemas/PcpOrUntagged'
          minItems: 1
          type: array
      type: object
    PcpEecIdPac:
      description: "This represents the PCP values that map to a given Egress Equivalence\
        \ Class Name (specified in EecIdentifier).  For an OVC End Point at UNI or\
        \ in a VUNI, the PCP values are from the C-Tag in the egress EI frames.  For\
        \ an OVC End Point at an ENNI and not in a VUNI, the PCP values are from the\
        \ S-Tag in the egress EI frames. Reference MEF 26.2 Section 16.9.1.1 OVC End\
        \ Point Egress Equivalence Class Identifier Service Attribute for Egress Data\
        \ ENNI Frames Mapped to an OVC End Point at an ENNI that is not a VUNI."
      properties:
        pcpValueList:
          description: This attribute provides a list of PCP values that map to Egress
            Equivalence Class Name.
          items:
            $ref: '#/components/schemas/PcpOrUntagged'
          minItems: 1
          type: array
      type: object
    PcpOrDiscard:
      description: This enumeration list the one of PCP values or DISCARD.
      properties:
        value:
          $ref: '#/components/schemas/PcpOrDiscardValue'
      type: object
    PcpOrDiscardValue:
      enum:
      - DISCARD
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      type: string
    PcpOrUntagged:
      description: This enumeration lists the one of PCP values or UNTAGGED.
      enum:
      - UNTAGGED
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      type: string
    Percentage:
      maximum: 100
      minimum: 0
      type: number
    PhysicalLayer:
      description: "This enumeration lists all the physical layer from the following\
        \ IEEE Standards:IEEE Std 802.3 ï¿½ 2015 [5] but excluding 1000BASE-PX-D and\
        \ 1000BASE-PX- U,IEEE Std 802.3bp ï¿½ 2016 [6],IEEE Std 802.3bq ï¿½ 2016 [7],IEEE\
        \ Std 802.3bs ï¿½ 2017 [8],IEEE Std 802.3bu ï¿½ 2016 [9],IEEE Std 802.3bv ï¿½ 2017\
        \ [10],IEEE Std 802.3by ï¿½ 2016 [11], IEEE Std 802.3bz ï¿½ 2016 [12], and IEEE\
        \ Std 802.3cc ï¿½ 2017 [13]. Reference MEF 26.2 Section 9.2 ENNI Physical Layer\
        \ Common Attribute and MEF 10.4 Section 9.4 Subscriber UNI List of Physical\
        \ Links Service Attribute."
      enum:
      - 10BASE2
      - 10BASE5
      - 10BASE_F
      - 10BASE_FB
      - 10BASE_FL
      - 10BASE_FP
      - 10BASE_T
      - 10BASE_TE
      - 10BROAD36
      - 10PASS_TS
      - 100BASE_BX10
      - 100BASE_FX
      - 100BASE_LX10
      - 100BASE_T
      - 100BASE_T2
      - 100BASE_T4
      - 100BASE_TX
      - 100BASE_X
      - 1000BASE_BX10
      - 1000BASE_CX
      - 1000BASE_KX
      - 1000BASE_LX
      - 1000BASE_LX10
      - 1000BASE_PX10
      - 1000BASE_PX20
      - 1000BASE_SX
      - 1000BASE_T
      - 1000BASE_X
      - 10GBASE_CX4
      - 10GBASE_E
      - 10GBASE_ER
      - 10GBASE_EW
      - 10GBASE_KR
      - 10GBASE_KX4
      - 10GBASE_L
      - 10GBASE_LR
      - 10GBASE_LRM
      - 10GBASE_LW
      - 10GBASE_LX4
      - 10GBASE_PR
      - 10GBASE_PRX
      - 10GBASE_R
      - 10GBASE_S
      - 10GBASE_SR
      - 10GBASE_SW
      - 10GBASE_T
      - 10GBASE_W
      - 10GBASE_X
      - 100GBASE_R
      - 100GBASE_CR10
      - 100GBASE_ER4
      - 100GBASE_LR4
      - 100GBASE_SR10
      - 40GBASE_R
      - 40GBASE_CR4
      - 40GBASE_FR
      - 40GBASE_KR4
      - 40GBASE_LR4
      - 40GBASE_SR4
      - 1BASE5
      - 2BASE_TL
      - 1G_EPON
      - 10G_EPON
      - 10_1G_EPON
      - 10_10G_EPON
      - OTHER
      - NONE
      type: string
    Place:
      allOf:
      - $ref: '#/components/schemas/Addressable'
      - properties:
          role:
            description: "Role of the place, such as: [home delivery], [shop retrieval]."
            type: string
        type: object
      description: "Place reference. Place defines the places where the products are\
        \ sold \nor delivered."
    Referenceable:
      allOf:
      - $ref: '#/components/schemas/Addressable'
      - properties:
          '@referredType':
            description: The class type of the target API schema object instance.
            type: string
        required:
        - '@referredType'
        type: object
      description: Base schema for all adressable API schema object references.
    RelatedPartyRef:
      allOf:
      - $ref: '#/components/schemas/Referenceable'
      - properties:
          role:
            description: "The role of the related party (e.g. Owner, requester)."
            type: string
        type: object
      description: |-
        A related party defines a party and its role, that is linked to a
        specific entity such as ServiceSpecification, ServiceOrder, Service, etc
    ResourceRef:
      allOf:
      - $ref: '#/components/schemas/Referenceable'
      - properties:
          '@type':
            default: Resource
            type: string
        type: object
      description: Provides reference to the Resource supporting the Service instance.
    SepColorIdPac:
      properties:
        color:
          description: "This attribute denotes the color of the EI frame, green or\
            \ yello."
          $ref: '#/components/schemas/FrameColor'
      type: object
    SepCosIdPac:
      description: "Represents the CoS Identifier that maps the EVC End Point or the\
        \ OVC End Point to a Class of Service Name. NOTE: This object does not have\
        \ attributes.  Reference MEF 26.2 Section 16.6.2 OVC End Point Class of Service\
        \ Identifier Service Attribute for an OVC End Point in a VUNI or at a UNI\
        \ and MEF 10.4 Section 10.5.1.1 EVC EP Ingress Class of Service Map Attribute\
        \ Based on EVC EP."
    ServiceCreate:
      allOf:
      - $ref: '#/components/schemas/Extensible'
      - properties:
          serviceType:
            description: 'Business type of the service '
            type: string
          note:
            items:
              $ref: '#/components/schemas/Note'
            type: array
          serviceRelationship:
            items:
              $ref: '#/components/schemas/ServiceRelationship'
            type: array
          supportingResource:
            items:
              $ref: '#/components/schemas/ResourceRef'
            readOnly: true
            type: array
          mefServiceConfiguration:
            $ref: '#/components/schemas/MefServiceConfiguration'
          serviceSpecification:
            $ref: '#/components/schemas/ServiceSpecificationRef'
          description:
            description: Free-text description of the service
            type: string
          supportingService:
            description: "A list of supporting services (SupportingService [*]). A\
              \ \ncollection of services that support this service (bundling, \nlink\
              \ CFS to RFS)."
            items:
              $ref: '#/components/schemas/ServiceRef'
            type: array
          place:
            items:
              $ref: '#/components/schemas/Place'
            type: array
          state:
            $ref: '#/components/schemas/ServiceStateType'
          category:
            description: Is it a customer facing or resource facing service
            type: string
          relatedParty:
            items:
              $ref: '#/components/schemas/RelatedPartyRef'
            type: array
        type: object
      description: "In the context of a service order, and depending of the action\
        \ requested (add/modify/delete/noChange) this data structure captures the\
        \ configuration to apply to an existing subscribed service or to a new one"
    ServiceOrder:
      allOf:
      - $ref: '#/components/schemas/ServiceOrderCreate'
      - properties:
          expectedCompletionDate:
            description: Expected delivery date set by the provider.
            format: date-time
            type: string
          completionDate:
            description: Date when the order was completed
            format: date-time
            type: string
          state:
            $ref: '#/components/schemas/ServiceOrderStateType'
          orderDate:
            description: Date when the order was created.
            format: date-time
            type: string
          startDate:
            description: Date when the order processing was started
            format: date-time
            type: string
        type: object
      description: |-
        A Service Order is used to request operations on a Service instance.
        A Service Order groups one or more one Service Order Items - one per
        specific action on a Service instance. The Action associated with the
        Service Order Item describes the operation (add, remove, update) to be
        applied on the specified Service instance.The Service Order Item and
        its associated Action can operate on both existing (remove, update) as
        well as future (add) Service instance.The Service Order is triggered
        from the Business Application (BA) system in charge of the Product Order
        management to the Service Orchestration Function (SOF) system that will
        orchestrate the Service fulfillment.
    ServiceOrderCreate:
      allOf:
      - $ref: '#/components/schemas/Addressable'
      - properties:
          note:
            items:
              $ref: '#/components/schemas/Note'
            type: array
          notificationContact:
            description: "Contact attached to the order to send back information \n\
              regarding this order"
            type: string
          orderItem:
            items:
              $ref: '#/components/schemas/ServiceOrderItem'
            minItems: 1
            type: array
          externalId:
            description: |-
              ID given by the consumer and only understandable by client
              (to facilitate client searches)
            type: string
          description:
            description: A free-text description of the service order
            type: string
          category:
            description: |-
              Used to categorize the order that can be useful for OM system
              (e.g. ï¿½broadbandï¿½, ï¿½TVOptionï¿½, ...)'
            type: string
          priority:
            description: |-
              A way that can be used by consumers to prioritize orders in
              Service Order Management system (from 0 to 4 : 0 is the highest
              priority, and 4 the lowest
            type: integer
          relatedParty:
            items:
              $ref: '#/components/schemas/RelatedPartyRef'
            type: array
          orderRelationship:
            items:
              $ref: '#/components/schemas/ServiceOrderRelationship'
            type: array
          requestedStartDate:
            description: Order start date wished by the requestor
            format: date-time
            type: string
          requestedCompletionDate:
            description: Requested delivery date from the requestor perspective
            format: date-time
            type: string
        type: object
      description: This structure is used in the operation POST for a serviceOrder
        request
    ServiceOrderItem:
      allOf:
      - $ref: '#/components/schemas/Extensible'
      - properties:
          service:
            $ref: '#/components/schemas/ServiceCreate'
          action:
            $ref: '#/components/schemas/ActionType'
          orderItemRelationship:
            items:
              $ref: '#/components/schemas/ServiceOrderItemRelationship'
            maxItems: 1
            minItems: 0
            type: array
          id:
            description: Identifier of the line item
            type: string
          state:
            $ref: '#/components/schemas/ServiceOrderStateType'
        required:
        - id
        - service
        type: object
      description: |-
        An identified part of the order. A service order is decomposed into one
        or more order items.
    ServiceOrderItemRef:
      allOf:
      - $ref: '#/components/schemas/Referenceable'
      - properties:
          '@type':
            default: ServiceOrderItem
            type: string
        type: object
      description: Reference to a Service Order Item instance.
    ServiceOrderItemRelationship:
      description: Reference to an related Service Order Item and the type of association.
      properties:
        relationshipType:
          $ref: '#/components/schemas/OrderItemRelationshipType'
        serviceOrder:
          $ref: '#/components/schemas/ServiceOrderItemRef'
      required:
      - relationshipType
      - serviceOrder
      type: object
    ServiceOrderRef:
      allOf:
      - $ref: '#/components/schemas/Referenceable'
      - properties:
          '@type':
            default: ServiceOrder
            type: string
        type: object
      description: Reference to a Service Order instance.
    ServiceOrderRelationship:
      description: Reference to an related Service Order and the type of association.
      properties:
        relationshipType:
          $ref: '#/components/schemas/OrderRelationshipType'
        serviceOrder:
          $ref: '#/components/schemas/ServiceOrderRef'
      required:
      - relationshipType
      - serviceOrder
      type: object
    ServiceOrderStateType:
      description: "List of possible state for the Service Order. \n* ACKNOWLEDGED\
        \ - Order has been received and has passed message\n  validation.\n* IN_PROGRESS\
        \ - Service Fulfillment has started.\n* PENDING - Order is currently in a\
        \ waiting stage for an explicitly\n  action/activity to be completed before\
        \ the order can progress further,\n  pending order amend or cancel assessment.\
        \ A pending stage can lead\n  into auto cancellation of an order, if no action\
        \ is take within the\n  defined timeframes to be described under the Agreement.\n\
        * HELD - Order cannot be progressed due to a temporary issue. For\n  example,\
        \ processing is temporarily delayed to resolve an\n  infrastructure shortfall\
        \ to facilitate supply of order. Upon\n  resolution of the issue, the order\
        \ will continue to progress.\n* CANCELLED - In-Flight Order has been successfully\
        \ cancelled.\n* COMPLETED - Provisioning completed and the Service is now\
        \ active.\n* FAILED - All of the Order items have failed which results in\
        \ the\n  entire Order to be Failed.\n* PARTIAL - Some of the Order items processing\
        \ have failed and some have\n  succeeded so the entire Order is in a Partial\
        \ state. This provides\n  support for partial Failure of an Order.\n* REJECTED\
        \ - An order failed the Order Feasibility checks. Service\n  technical eligibility\
        \ is not done throught service order API but with\n  dedicated serviceQualification\
        \ API (from preOrdering domain) invalid\n  information is provided through\
        \ the order request. The order request\n  fails to meet business rules for\
        \ ordering."
      enum:
      - ACKNOWLEDGED
      - IN_PROGRESS
      - PENDING
      - HELD
      - CANCELLED
      - COMPLETED
      - FAILED
      - PARTIAL
      - REJECTED
      type: string
    ServiceRef:
      allOf:
      - $ref: '#/components/schemas/Referenceable'
      - properties:
          '@type':
            default: Service
            type: string
        type: object
      description: Reference to a Service instance.
    ServiceRelationship:
      description: Reference to an related Service and the type of association.
      properties:
        relationshipType:
          $ref: '#/components/schemas/ServiceRelationshipType'
        service:
          $ref: '#/components/schemas/ServiceRef'
      required:
      - relationshipType
      - service
      type: object
    ServiceRelationshipType:
      description: Relationship type.
      enum:
      - reliesOn
      - dependency
      - crossRef
      type: string
    ServiceSpecificationRef:
      allOf:
      - $ref: '#/components/schemas/Referenceable'
      - properties:
          targetServiceSchema:
            $ref: '#/components/schemas/TargetServiceSchema'
          version:
            description: Service specification version.
            type: string
        type: object
      description: Reference to a ServiceSpecification instance.
    ServiceStateType:
      description: List of possible state for the Service.
      enum:
      - feasibilityChecked
      - designed
      - reserved
      - active
      - inactive
      - terminated
      type: string
    SetOfOrderedPairs:
      description: Data type representing a set of Ordered Pairs.
      properties:
        orderedPairsList:
          items:
            $ref: '#/components/schemas/OrderedPair'
          minItems: 1
          type: array
      type: object
    SlsCosNameEntry:
      description: "The SlsCosNameEntry data type represents the CoS Name entry consisting\
        \ of a list of 5-tuples of the form <CoS Name, deltat, C, n, PM> where CoS\
        \ Name is Class of Service Name, deltat is a small time interval, C is a threshold\
        \ and n to identify consecutive deltat for high loss interval and PM is a\
        \ non-empty list where each element in the list consists of Performance Metrics.\
        \ The SlsCosNameEntry data type is associated with EVC or OVC and SlsObjectiveAndParameters.\
        \ Reference MEF 10.4 Section 8.8 EVC Service Level Specification Service Attribute\
        \ and MEF 26.2 Section 12.13 OVC Service Level Specification Service Attribute."
      properties:
        thresholdC:
          description: "Denotes the threshold for FLR, used to determine whether a\
            \ given time interval delta t has high loss."
          type: number
        oneWayConsecutiveHighLossIntervalsPmMetric:
          description: Pointer to One-way Consecutive High Loss Interval Performance
            Management Metric.
          items:
            $ref: '#/components/schemas/OneWayConsecutiveHighLossIntervalsPmMetric'
          minItems: 0
          type: array
        oneWayFrameDelayPmMetric:
          description: Pointer to One-way Frame Delay Performance Management Metric.
          items:
            $ref: '#/components/schemas/OneWayFrameDelayPmMetric'
          minItems: 0
          type: array
        oneWayInterFrameDelayVariationPmMetric:
          description: Pointer to One-way Inter-Frame Delay Variation Performance
            Management Metric.
          items:
            $ref: '#/components/schemas/OneWayInterFrameDelayVariationPmMetric'
          minItems: 0
          type: array
        oneWayMeanFrameDelayPmMetric:
          description: Pointer to One-way Mean Frame Delay Performance Management
            Metric.
          items:
            $ref: '#/components/schemas/OneWayMeanFrameDelayPmMetric'
          minItems: 0
          type: array
        oneWayGroupAvailabilityPmMetric:
          description: Pointer to One-way Group Availability Performance Management
            Metric.
          items:
            $ref: '#/components/schemas/OneWayGroupAvailabilityPmMetric'
          minItems: 0
          type: array
        oneWayMeanFrameDelayRangePmMetric:
          description: Pointer to One-way Frame Delay Range Performance Management
            Metric.
          items:
            $ref: '#/components/schemas/OneWayMeanFrameDelayRangePmMetric'
          minItems: 0
          type: array
        oneWayAvailabilityPmMetric:
          description: Pointer to One-way Availability Performance Management Metric.
          items:
            $ref: '#/components/schemas/OneWayAvailabilityPmMetric'
          minItems: 0
          type: array
        oneWayCompositePmMetric:
          description: Pointer to One-way Composite Performance Management Metric.
          items:
            $ref: '#/components/schemas/OneWayCompositePmMetric'
          minItems: 0
          type: array
        oneWayFrameLossRatioPmMetric:
          description: Pointer to One-way Frame Loss Ratio Performance Management
            Metric.
          items:
            $ref: '#/components/schemas/OneWayFrameLossRatioPmMetric'
          minItems: 0
          type: array
        consecutiveIntervalN:
          description: "This attribute denotes n, used to identify how many consecutive\
            \ delta-T intervals must have high loss to trigger a change in Availability."
          type: integer
        deltaT:
          description: "This attribute denotes the delta-T, a time interval in seconds,\
            \ smaller than T (SLS time period)."
          type: integer
        oneWayHighLossIntervalPmMetric:
          description: Pointer to One-way High Loss Interval Performance Management
            Metric.
          items:
            $ref: '#/components/schemas/OneWayHighLossIntervalPmMetric'
          minItems: 0
          type: array
        cosName:
          description: Class of Service name.
          type: string
      type: object
    SourceMacAddressLimit:
      description: This limits the number of source MAC addresses that can be used
        in ingress external interface frame mapped to the End Point of all types over
        a time interval. Reference MEF 26.2 Section 16.15 OVC End Point Source MAC
        Address Limit Service Attribute and MEF 10.4 Section 10.12 EVC EP Source MAC
        Address Limit Service Attribute.
      properties:
        limit:
          description: This attribute denotes the maximum acceptable source MAC addresses.
          type: integer
        interval:
          description: This attribute denotes the time interval in milliseconds.
          type: integer
      type: object
    State:
      enum:
      - LOCKED
      - UNLOCKED
      type: string
    SubscriberUniPhysicalLinks:
      description: "The value of the Subscriber UNI List of Physical Links Service\
        \ Attribute is a list of 4-tuples (which may be empty if Virtual UNI is used)\
        \ of the form <id,pl,fs,pt>, with one list item for each physical link. The\
        \ The value of id is an identifier for the physical link. The value of pl\
        \ specifies a physical layer. fs indicates if synchronous Ethernet is used\
        \ on the physical link corresponding to the 4-tuple and has the value either\
        \ Enabled or Disabled. The value of pt indicates if the Precision Time Protocol\
        \ is used on the physical link corresponding to the 4-tuple and has the value\
        \ either En-abled or Disabled. Reference MEF 10.4 Section 9.4 Subscriber UNI\
        \ List of Physical Links Service Attribute."
      properties:
        physicalLink:
          description: Physical layer type.
          $ref: '#/components/schemas/PhysicalLayer'
        synchronousEthernet:
          description: Synchronous Ethernet enabled or disabled.
          $ref: '#/components/schemas/EnabledDisabled'
        id:
          description: Identifier of link.
          type: string
        precisionTiming:
          description: Precision timing enabled or disabled.
          $ref: '#/components/schemas/EnabledDisabled'
      type: object
    SvlanIdControl:
      description: "When the value is Full, the Operator can support only a single\
        \ SP/SO at the ENNI."
      properties:
        value:
          $ref: '#/components/schemas/SvlanIdControlValue'
      type: object
    SvlanIdControlValue:
      enum:
      - FULL
      - PARTIAL
      type: string
    SyncModePerLink:
      description: A link may consist of one or more physical ports.  This data type
        includes the link ID and sync mode of the physical port associated to the
        link id. Reference MEF 26.4 Section 14.2 Operator UNI Physical Layer Service
        Attribute.
      properties:
        syncModeEnabled:
          description: This attribute denotes whether the Synchronous Mode is enabled
            on the link with the Link ID.
          type: boolean
      type: object
    TaggedL2cpProcessing:
      description: Either 802.1 compliant or not. Reference MEF 45.1 Section 8.3 ENNI
        Tagged L2CP Frame Processing Multilateral Attribute.
      properties:
        type:
          $ref: '#/components/schemas/TaggedL2cpProcessingType'
      type: object
    TaggedL2cpProcessingType:
      enum:
      - 802_1_COMPLIANT
      - 802_1_NON_COMPLIANT
      type: string
    TargetServiceSchema:
      allOf:
      - $ref: '#/components/schemas/Extensible'
      description: The reference to the schema and type of target service which is
        described by service specification
    Time:
      description: A data type used to represent time in various units.
      properties:
        number:
          description: Time as a float.
          type: number
        unit:
          description: Time units as set of enumerations.
          $ref: '#/components/schemas/Unit'
      type: object
    TimeAndDate:
      description: This data type is for Time and Date in UTC. Used for CarrierEthernetSls
        startTime attribute.
      properties:
        hour:
          description: Denotes the hour.
          type: integer
        month:
          description: Denotes the month.
          type: integer
        year:
          description: Denotes the year.
          type: integer
        day:
          description: Denotes the day.
          type: integer
        minute:
          description: Denotes the minute.
          type: integer
        second:
          description: Denotes the second.
          type: integer
      type: object
    TimeIntervalT:
      description: "This attribute sets the time interval to evaluate the performance\
        \ for the SLS.  All performances of this SLS use the same time interval T,\
        \ which itself may not be constrained, e.g., 1 month."
      properties:
        number:
          description: This denotes the value (for the unit).
          type: integer
        unit:
          description: Time interval unit.
          $ref: '#/components/schemas/TimeIntervalTUnit'
      type: object
    TimeIntervalTUnit:
      description: Time interval unit.
      enum:
      - day
      - month
      - week
      - year
      type: string
    TokenShare:
      description: An indication of the support of mapping more than one Bandwidth
        Profile Flow to an Envelope at the ENNI. Reference MEF 26.2 Section 13.5 ENNI
        Token Share Service Attribute.
      enum:
      - ENABLED
      - DISABLED
      type: string
    Type:
      enum:
      - CN_C_TAG_PCP
      - CC_C_TAG_PCP
      - CC_C_TAG_DEI
      - CN_S_TAG_PCP
      - CC_S_TAG_PCP
      - CC_S_TAG_DEI
      type: string
    Unit:
      description: Time units as set of enumerations.
      enum:
      - nanoSeconds
      - microSeconds
      - milliSeconds
      - seconds
      type: string
    Value:
      enum:
      - COLOR_AWARE
      - COLOR_BLIND
      type: string
    VirtualFrameMap:
      description: A map for virtual frame mapping.   The absence of this attribute
        corresponds to a Service Attribute value of Not Applicable. Reference MEF
        10.4 Section 9.3 Subscriber UNI Virtual Frame Map Service Attribute.
      type: object
    VlanId:
      description: "Data type with single attribute, vlanId which is defined as a\
        \ PostiveInteger. Value 1 to 4094. Ref-erence MEF 10.4 Section 10.4 EVC EP\
        \ Map Service Attribute and MEF 26.2 Section 14.9 Opera-tor UNI Default CE-VLAN\
        \ ID Service Attribute."
      properties:
        vlanId:
          maximum: 4094
          minimum: 1
          type: integer
      type: object
    VlanIdListOrUntag:
      description: "VLAN ID types, ALL for all VLAN IDs, LIST for a list of VLAN IDs,\
        \ EXCEPT for all VLAN IDs except the listed, UNTAGGED to indicate that untagged\
        \ and priority-tagged frames are mapped to this end point. Reference MEF 10.4\
        \ Section 10.4 EVC EP Map Service Attribute."
      properties:
        vlanIdList:
          items:
            $ref: '#/components/schemas/VlanId'
          minItems: 0
          type: array
        type:
          $ref: '#/components/schemas/VlanIdMappingTypeOrUntag'
      type: object
    VlanIdListing:
      description: "The list VLAN IDs, either when type=LIST, or when type=EXCEPT\
        \ (which means the VLAN IDs except the listed).  When type=ALL, the VLAN ID\
        \ list is not applicable. Reference MEF 26.2 Section 16.5.4 OVC End Point\
        \ Map Form U."
      properties:
        vlanIdList:
          description: This is a list of VLAN IDs.
          items:
            $ref: '#/components/schemas/VlanId'
          minItems: 0
          type: array
        type:
          $ref: '#/components/schemas/VlanIdMappingType'
      type: object
    VlanIdMappingType:
      description: "Enumeration for VLAN ID types, ALL for all VLAN IDs, LIST for\
        \ a list of VLAN IDs, EXCEPT for all VLAN IDs except the listed: ALL-All VLAN\
        \ IDs, EXCEPT- All VLAN IDs excepted the listed, LIST-List of VLAN IDs."
      enum:
      - ALL
      - EXCEPT
      - LIST
      type: string
    VlanIdMappingTypeOrUntag:
      description: "Enumeration for VLAN ID types, ALL for all VLAN IDs, LIST for\
        \ a list of VLAN IDs, EX-CEPT for all VLAN IDs except the listed, UNTAGGED\
        \ to indicate untagged and priority-tagged frames are mapped to this end point:\
        \ ALL- All VLAN IDs, EXCEPT- All VLAN IDs except the listed. LIST- List of\
        \ VLAN IDs, UNTAGGED- Untagged and priority-tagged frames."
      enum:
      - ALL
      - EXCEPT
      - LIST
      - UNTAGGED
      type: string
    VlanIdPreservation:
      description: Enumeration for VLAN ID Preservation. Reference MEF 26.2 Section
        12.7 OVC CE-VLAN ID Preservation Service Attribute.
      enum:
      - PRESERVE
      - RETAIN
      - STRIP
      type: string
    VlanType:
      enum:
      - ETHERTYPE
      - LLC
      type: string
    carrierEthernetSls:
      description: Schema for MEF Carrier Ethernet Service Level Specification used
        service provisioning
      properties:
        slsCosNameEntry:
          description: Pointer to SlsCosNameEntry.
          items:
            $ref: '#/components/schemas/SlsCosNameEntry'
          minItems: 1
          type: array
        timeInterval:
          $ref: '#/components/schemas/TimeIntervalT'
        startTime:
          $ref: '#/components/schemas/TimeAndDate'
      title: MEF LSO Legato - Carrier Ethernet SLS Schema
